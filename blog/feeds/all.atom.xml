<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2017Fall CADP&amp;CP (虎尾科大MDE)</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/" rel="alternate"></link><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/feeds/all.atom.xml" rel="self"></link><id>https://mde1a1.kmol.info/2017fall/doc/trunk/blog/</id><updated>2017-10-20T11:00:00+08:00</updated><entry><title>KMOL 整合課程介紹</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-integrated-course-introduction.html" rel="alternate"></link><published>2017-10-20T11:00:00+08:00</published><updated>2017-10-20T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-10-20:/2017fall/doc/trunk/blog/kmol-integrated-course-introduction.html</id><summary type="html">&lt;p&gt;&lt;span style="background-color: #ffff00;"&gt;KMOL&lt;/span&gt; 是 KMOUL 的簡寫, 全文為 Knowledge Management and Optimal Utilization Laboratory, 也就是&lt;span style="background-color: #ffff00;"&gt;知識管理與最佳化應用實驗室&lt;/span&gt; (KMOLab). 目前由 KMOL 實驗室負責的課程有大一的計算機程式與網際內容管理, 以及大二的電腦輔助設計實習與協同產品設計實習.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;span style="background-color: #ffff00;"&gt;KMOL&lt;/span&gt; 是 KMOUL 的簡寫, 全文為 Knowledge Management and Optimal Utilization Laboratory, 也就是&lt;span style="background-color: #ffff00;"&gt;知識管理與最佳化應用實驗室&lt;/span&gt; (KMOLab). 目前由 KMOL 實驗室負責的課程有大一的計算機程式與網際內容管理, 以及大二的電腦輔助設計實習與協同產品設計實習.&lt;/p&gt;


&lt;h3&gt;知識管理與最佳化應用&lt;/h3&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00;"&gt;知識亦即經由學習、經驗或仔細審查之過程, 得以針對特定主題, 了解事實真相或原理原則之能力&lt;/span&gt;. 知識的應用則必須在特定情況下, 用於辨別情境後, 找出方法, 進而解決問題. &lt;/p&gt;
&lt;p&gt;由於知識概分為外顯知識與內隱知識, 所謂外顯知識, 就是已經被詳細紀載, 可以單獨經由閱讀獲得, 但是內隱知識則並未或無需明講, 但在不同群體與文化傳承之下,  不言可喻或尚無法準確描述或傳承的認知、理念或價值.&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00;"&gt;知識之所以必須有效管理, 原因在於傳承、應用與持續改進之必要&lt;/span&gt;. 尤其在二十一世紀網路通訊普及、高速實體載運發達、數位運算能力大幅提升, 以及全球協同的模式下, 使得&lt;span style="background-color: #ffff00;"&gt;各類產品與知識的生命週期縮短, 各領域知識多元整合與衝擊下, 各團隊必須共同面對許多問題的解決, 互助共享知識的應用&lt;/span&gt;, 方得長治久安.&lt;/p&gt;
&lt;p&gt;所謂知識的最佳化應用, 即在上述多元且複雜的情境下, 善用數位網路與運算方法, 找出最具價值的知識應用模式, 透過&lt;span style="background-color: #ffff00;"&gt;持續改進且能永續長存的虛實整合系統&lt;/span&gt; (Cyber &amp;amp; Physical Integrated System), 解決各種問題.&lt;/p&gt;
&lt;h3&gt;KMOLab 課程教育目標&lt;/h3&gt;
&lt;p&gt;在善用數位網路與運算方法, 逐步建構虛實整合系統方針下,  KMOLab 希望透過&lt;span style="background-color: #ffff00;"&gt;計算機程式課程, 讓使用者有能力利用電腦及網路溝技術, 以電腦程式建置初步的系統與套件&lt;/span&gt;, 在持續改進與永續長存的理念下, 導入組態管理系統 (Configuration Management System), 明確利用歷程資訊, 保存系統組成元件的建置過程, 並&lt;span style="background-color: #ffff00;"&gt;訓練學員善用口語、文字、2D、3D、數學與實體表達各階段之設計與實作狀態&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;網際內容管理課程則讓學員從電腦硬體的拆解、網路線的製作與連線設定及配置開始 ,進而安裝操作系統, 並&lt;span style="background-color: #ffff00;"&gt;透過電腦程式建構能在網際環境中管理機械設計資訊的伺服套件&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;電腦輔助設計實習與協同產品設計實習課程, 則是讓學員&lt;span style="background-color: #ffff00;"&gt;從各種開放套件的使用, 學習從數位模擬到機電資協同整合設計過程, 如何透過專題製作解決各種問題&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;KMOLab 使用工具&lt;/h3&gt;
&lt;p&gt;程式語言: Python 3、C/C++、Javascript、Brython&lt;/p&gt;
&lt;p&gt;電腦輔助設計: Solvespace、Onshape、V-rep 、Blender&lt;/p&gt;
&lt;p&gt;軟體組態管理: Fossil SCM、Github、Bitbucket&lt;/p&gt;
&lt;p&gt;個人資訊管理: Leo Editor、Pelican Blog、Reveal.js、Jupyterlab&lt;/p&gt;
&lt;p&gt;圖形介面: PyQt5、Web-based&lt;/p&gt;
&lt;p&gt;內容管理: CMSimfly、Pygrouf&lt;/p&gt;</content><category term="2017fall"></category><category term="KMOL"></category></entry><entry><title>2017 Fall CP 第六週 - Python3 程式語法練習</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017-fall-course-cp-w6.html" rel="alternate"></link><published>2017-10-17T11:00:00+08:00</published><updated>2017-10-17T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-10-17:/2017fall/doc/trunk/blog/kmol-2017-fall-course-cp-w6.html</id><summary type="html">&lt;p&gt;本週起開始使用 Eric6 IDE 建立 PyQt5 視窗程式, 計算器程式的圖形介面將從 Qt Designer 中, 以滑鼠及視覺化模式建立, 之後再轉為 .py 程式後, 與隨後的程式邏輯進行互動. 請使用者自行下載 &lt;a href="https://link.springer.com/book/10.1007/978-1-4842-2385-7"&gt;Lean Python&lt;/a&gt; 電子書與&lt;a href="https://github.com/Apress/lean-python"&gt;範例程式&lt;/a&gt;配合學習.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;本週起開始使用 Eric6 IDE 建立 PyQt5 視窗程式, 計算器程式的圖形介面將從 Qt Designer 中, 以滑鼠及視覺化模式建立, 之後再轉為 .py 程式後, 與隨後的程式邏輯進行互動. 請使用者自行下載 &lt;a href="https://link.springer.com/book/10.1007/978-1-4842-2385-7"&gt;Lean Python&lt;/a&gt; 電子書與&lt;a href="https://github.com/Apress/lean-python"&gt;範例程式&lt;/a&gt;配合學習.&lt;/p&gt;


&lt;!-- 導入 FileSaver 與 filereader --&gt;

&lt;script type="text/javascript" src="./../ace/FileSaver.min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../ace/filereader.js"&gt;&lt;/script&gt;

&lt;!-- 導入最新版的 Brython 標準程式庫 3.3.4 --&gt;

&lt;script type="text/javascript" src="./../data/Brython-3.3.4/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 導入平面機構模擬所需程式庫 --&gt;

&lt;!-- sylvester.js 為向量、矩陣與幾何程式庫 http://sylvester.jcoglan.com/ --&gt;

&lt;script src="./../data/sylvester/sylvester.js"&gt;&lt;/script&gt;

&lt;!-- PrairieDraw.js 為延伸 sylvester.js 的 html5 canvas 繪圖應用程式庫 https://github.com/martin70/PrairieDraw.js --&gt;

&lt;script src="./../data/sylvester/PrairieDraw.js"&gt;&lt;/script&gt;

&lt;style&gt;
canvas {
    border: 1px solid black;
}
&lt;/style&gt;

&lt;!-- 啟動 Brython 時, 設定 pythonpath 為 data/py, 並將 script1.py 放入, 以便取代 3.2.9 之前版本的 script id 導入 --&gt;

&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下執行 Brython 程式 --&gt;

&lt;script src="./../ace/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/ext-language_tools.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/mode-python3.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/snippets/python.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;

&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;

&lt;p&gt;編寫 Python3 程式邏輯之前必須先了解基本的程式語法, 其中包括:&lt;/p&gt;
&lt;h3&gt;Python3 變數命名規則與關鍵字&lt;/h3&gt;
&lt;p&gt;Python 英文變數命名規格&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;變數必須以英文字母大寫或小寫或底線開頭
變數其餘字元可以是英文大小寫字母, 數字或底線
變數區分英文大小寫
變數不限字元長度
不可使用關鍵字當作變數名稱
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用者可以利用以下程式列出所使用 Python 的版次與關鍵字:&lt;/p&gt;
&lt;!-- 印出版次與關鍵字程式 --&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

Ace.editor.setValue('''# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
&lt;/script&gt;

&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;

&lt;div id="kw_editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="kw_filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('kw_py_src', 'kw_filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="kw_run"&gt;Run&lt;/button&gt;
&lt;button id="kw_show_console"&gt;Output&lt;/button&gt;
&lt;button id="kw_clear_console"&gt;清除&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="kw_console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Python3 的程式關鍵字, 使用者命名變數時, 必須避開下列保留字.&lt;/p&gt;
&lt;p&gt;Python keywords:  ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']&lt;/p&gt;
&lt;p&gt;選擇好的變數名稱:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;使用有意義且適當長度的變數名稱， 例如: 使用 length 代表長度, 不要單獨使用 l 或 L, 也不要使用 this_is_the_length
程式前後變數命名方式盡量一致, 例如: 使用 rect_length 或 RectLength
用底線開頭的變數通常具有特殊意義
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;print() 函式用法&lt;/h3&gt;
&lt;p&gt;print() 為 Python 程式語言中用來列印數值或字串的函式, 其中有 sep 變數定義分隔符號, ｓep 內定為 ",", end 變數則用來定義列印結尾的符號, end 內定為跳行符號.&lt;/p&gt;
&lt;h3&gt;for 迴圈用法與 Python 的縮排規定&lt;/h3&gt;
&lt;p&gt;重複迴圈用法, 使用者可以透過下列程式編輯區練習 for 迴圈與 print() 函式的用法.&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

Ace = ace.Editor(editor_id="editor", console_id="console", container_id="first_container", storage_id="py_src" )

Ace.editor.setValue('''#ex1 簡單的 for 迴圈範例
for i in range(10):
    print(i)
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['run'].bind('click', Ace.run)
doc['show_console'].bind('click', Ace.show_console)
doc['clear_console'].bind('click', Ace.clear_console)
&lt;/script&gt;

&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;

&lt;div id="editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('py_src', 'filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="run"&gt;Run&lt;/button&gt;
&lt;button id="show_console"&gt;Output&lt;/button&gt;
&lt;button id="clear_console"&gt;清除&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;!-- 以下置入 brython turtle 繪圖程式段, 但是各畫布必須使用不同名稱 --&gt;

&lt;p&gt;下列的 Brython turtle 網際繪圖程式僅提供參考, 可以用來練習 Python3 程式語法.&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

Ace = ace.Editor(editor_id="turtle_editor", console_id="turtle_console", container_id="container", storage_id="turtle_py_src" )

Ace.editor.setValue('''import turtle
t=turtle.Turtle()

t.penup()
t.left(45)
t.backward(125)
t.right(45)
t.pendown()

for c in ['red', 'green', 'yellow', 'blue']:
    t.color(c)
    t.forward(75)
    t.left(90)

t1=turtle.Turtle("turtle")
t1.penup()

t1.pendown()
t1.width(3)
for c in ['red', 'blue', 'yellow', 'green', 'purple', 'brown']:
    t1.color(c)
    t1.forward(50)
    t1.left(60)

t1.penup()
t1.left(60)
t1.backward(120)

t1.pendown()
t1.color('red')
t1.write("I love Brython!!")

turtle._Screen().end()
''')

Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

doc['turtle_run'].bind('click', Ace.run)
doc['turtle_show_console'].bind('click', Ace.show_console)
doc['turtle_clear_console'].bind('click', Ace.clear_console)
doc['turtle_clear_container'].bind('click', Ace.clear_container)
&lt;/script&gt;

&lt;div id="turtle_editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="turtle_filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('tutle_py_src', 'turtle_filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="turtle_run"&gt;Run&lt;/button&gt;
&lt;button id="turtle_show_console"&gt;Output&lt;/button&gt;
&lt;button id="turtle_clear_console"&gt;清除&lt;/button&gt;
&lt;button id="turtle_clear_container"&gt;清除畫布&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="turtle_console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;!-- container 主要提供網際繪圖用之畫布 --&gt;

&lt;div id="container"&gt;&lt;/div&gt;

&lt;h3&gt;函式用法與呼叫&lt;/h3&gt;
&lt;p&gt;使用者可以利用下列程式, 練習 def 函式定義與呼叫的用法.&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

Ace = ace.Editor(editor_id="fun_editor", console_id="fun_console", container_id="fun_container", storage_id="fun_py_src" )

Ace.editor.setValue('''# 定義函式
def square_of_x(x):
    return x*x

# 呼叫函式
y = square_of_x(3)
# 列印 y 對應內容
print(y)
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['fun_run'].bind('click', Ace.run)
doc['fun_show_console'].bind('click', Ace.show_console)
doc['fun_clear_console'].bind('click', Ace.clear_console)
&lt;/script&gt;

&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;

&lt;div id="fun_editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="fun_filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('fun_py_src', 'fun_filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="fun_run"&gt;Run&lt;/button&gt;
&lt;button id="fun_show_console"&gt;Output&lt;/button&gt;
&lt;button id="fun_clear_console"&gt;清除&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="fun_console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;!-- Brython 的網際繪圖 --&gt;

&lt;p&gt;以下網際繪圖程式, 僅提供參考.&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

Ace = ace.Editor(editor_id="by_editor", console_id="by_console", container_id="by_container", storage_id="by_py_src" )

Ace.editor.setValue('''# First of all, the import of some libraries
from browser import document as doc
from browser import html

# All the elements will be inserted in the div with the "container" id
container = doc['by_container']

# We create a new div element
newdiv = html.DIV(id = "new-div")
# Now we add some style
newdiv.style = {"padding": "5px", 
               "backgroundColor": "#ADD8E6"}

# Now, lets add a table with a column with numbers and a
# column with a word on each cell
text = "Brython is really cool"
textlist = text.split()
table = html.TABLE()
for i, word in enumerate(textlist):
    table &lt;= html.TR(html.TD(i + 1) + 
                     html.TD(word))
# Now we add some style to the table
table.style = {"padding": "5px", 
               "backgroundColor": "#aaaaaa",
               "width": "100%"}
# Now we add the table to the new div previously created
newdiv &lt;= table + html.BR()

# a form? why not?
form = html.FORM()
input1 = html.INPUT(type="text", name="firstname", value="First name")
input2 = html.INPUT(type="text", name="lastname", value="Last name")
input3 = html.BUTTON("Button with no action!")
form &lt;= input1 + html.BR() + input2 + html.BR() + input3

newdiv &lt;= form + html.BR()

# Finally, we will add something more 'HTML5istic', a canvas with
# a color gradient in the newdiv previously created and below the form
canvas = html.CANVAS(width = 300, height = 300)
#canvas.style = {"width": "100%"}
ctx = canvas.getContext('2d')
ctx.rect(0, 0, 300, 300)
grd = ctx.createRadialGradient(150, 150, 10, 150, 150, 150)
grd.addColorStop(0, '#8ED6FF')
grd.addColorStop(1, '#004CB3')
ctx.fillStyle = grd
ctx.fill()

newdiv &lt;= canvas
# And finally we append the newdiv element
# to the parent, in this case the div with the "container" id
container &lt;= newdiv
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['by_run'].bind('click', Ace.run)
doc['by_show_console'].bind('click', Ace.show_console)
doc['by_clear_console'].bind('click', Ace.clear_console)
doc['by_clear_container'].bind('click', Ace.clear_container)
&lt;/script&gt;

&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;

&lt;div id="by_editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="by_filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('by_py_src', 'by_filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="by_run"&gt;Run&lt;/button&gt;
&lt;button id="by_show_console"&gt;Output&lt;/button&gt;
&lt;button id="by_clear_console"&gt;清除&lt;/button&gt;
&lt;button id="by_clear_container"&gt;清除畫布&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="by_console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div id="by_container"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;!-- Brython 動畫 --&gt;

&lt;p&gt;以下網際動態繪圖程式, 僅提供參考.&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

Ace = ace.Editor(editor_id="clock_editor", console_id="clock_console", container_id="clock_container", storage_id="clock_py_src" )

Ace.editor.setValue('''# First of all, the import of some libraries
import time
import math
import datetime
from browser import document as doc
import browser.timer
from browser import html

sin,cos = math.sin,math.cos
width,height = 250,250 # canvas dimensions
ray = 100 # clock ray

# All the elements will be inserted in the div with the "container" id
container = doc['clock_container']

# We create a new div element
newdiv = html.DIV(id = "new-div")
# Now we add some style
newdiv.style = {"padding": "5px", 
               "backgroundColor": "#ADD8E6"}

canvas = html.CANVAS(width = width, height = height)
#canvas.style = {"width": "100%"}
ctx = canvas.getContext('2d')

def needle(angle,r1,r2,color="#000000"):
    # draw a needle at specified angle in specified color
    # r1 and r2 are percentages of clock ray
    x1 = width/2-ray*cos(angle)*r1
    y1 = height/2-ray*sin(angle)*r1
    x2 = width/2+ray*cos(angle)*r2
    y2 = height/2+ray*sin(angle)*r2
    ctx.beginPath()
    ctx.strokeStyle = color
    ctx.moveTo(x1,y1)
    ctx.lineTo(x2,y2)
    ctx.stroke()

def set_clock():
    # erase clock
    ctx.beginPath()
    ctx.fillStyle = "#FFF"
    ctx.arc(width/2,height/2,ray*0.89,0,2*math.pi)
    ctx.fill()

    # redraw hours
    show_hours()

    # print day
    now = datetime.datetime.now()
    day = now.day
    ctx.font = "bold 14px Arial"
    ctx.textAlign = "center"
    ctx.textBaseline = "middle"
    ctx.fillStyle="#FFF"
    ctx.fillText(day,width*0.7,height*0.5)

    # draw needles for hour, minute, seconds    
    ctx.lineWidth = 3
    hour = now.hour%12 + now.minute/60
    angle = hour*2*math.pi/12 - math.pi/2
    needle(angle,0.05,0.5)
    minute = now.minute
    angle = minute*2*math.pi/60 - math.pi/2
    needle(angle,0.05,0.85)
    ctx.lineWidth = 1
    second = now.second+now.microsecond/1000000
    angle = second*2*math.pi/60 - math.pi/2
    needle(angle,0.05,0.85,"#FF0000") # in red

browser.timer.set_interval(set_clock,100)

ctx.beginPath()
ctx.lineWidth = 10
ctx.arc(width/2,height/2,ray,0,2*math.pi)
ctx.stroke()

for i in range(60):
    ctx.lineWidth = 1
    if i%5 == 0:
        ctx.lineWidth = 3
    angle = i*2*math.pi/60 - math.pi/3
    x1 = width/2+ray*cos(angle)
    y1 = height/2+ray*sin(angle)
    x2 = width/2+ray*cos(angle)*0.9
    y2 = height/2+ray*sin(angle)*0.9
    ctx.beginPath()
    ctx.moveTo(x1,y1)
    ctx.lineTo(x2,y2)
    ctx.stroke()

def show_hours():
    ctx.beginPath()
    ctx.arc(width/2,height/2,ray*0.05,0,2*math.pi)
    ctx.fillStyle = "#000"
    ctx.fill()
    for i in range(1,13):
        angle = i*math.pi/6-math.pi/2
        x3 = width/2+ray*cos(angle)*0.75
        y3 = height/2+ray*sin(angle)*0.75
        ctx.font = "20px Arial"
        ctx.textAlign = "center"
        ctx.textBaseline = "middle"
        ctx.fillText(i,x3,y3)
    # cell for day
    ctx.fillStyle = "#000"
    ctx.fillRect(width*0.65,height*0.47,width*0.1,height*0.06)

show_hours()
set_clock()

newdiv &lt;= canvas
# And finally we append the newdiv element
# to the parent, in this case the div with the "container" id
container &lt;= newdiv
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['clock_run'].bind('click', Ace.run)
doc['clock_show_console'].bind('click', Ace.show_console)
doc['clock_clear_console'].bind('click', Ace.clear_console)
doc['clock_clear_container'].bind('click', Ace.clear_container)
&lt;/script&gt;

&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;

&lt;div id="clock_editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="clock_filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('clock_py_src', 'clock_filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="clock_run"&gt;Run&lt;/button&gt;
&lt;button id="clock_show_console"&gt;Output&lt;/button&gt;
&lt;button id="clock_clear_console"&gt;清除&lt;/button&gt;
&lt;button id="clock_clear_container"&gt;清除畫布&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="clock_console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div id="clock_container"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;基本物件導向與案例&lt;/h3&gt;
&lt;p&gt;Python 採用類別 (class) 將案例變數 (instance variables) 與案例方法 (instance methods) 包在一起, 並用來定義一種物件 (object).&lt;/p&gt;
&lt;p&gt;物件導向具有封裝 (encapsulation) , 繼承 (inheritance) 與多形 ( polymorphism) 等三種特性.&lt;/p&gt;
&lt;!-- oop 範例 --&gt;

&lt;p&gt;使用者可以利用下列程式練習 Python3 物件的定義與應用.&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

Ace = ace.Editor(editor_id="oop1_editor", console_id="oop1_console", container_id="oop1_container", storage_id="oop1_py_src" )

Ace.editor.setValue('''# Robot class 定義
class Robot(object):
    def __init__(self, name, by):
        self._name = name
        self._build_year = by

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, newname):
        self._name = name

    @property
    def build_year(self):
        return self._build_year

    @build_year.setter
    def build_year(self, newby):
        self._build_year = newby

x = Robot("bob", 1993)
x.build_year = 1993
print(x.name)
print(x.build_year)
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['oop1_run'].bind('click', Ace.run)
doc['oop1_show_console'].bind('click', Ace.show_console)
doc['oop1_clear_console'].bind('click', Ace.clear_console)
&lt;/script&gt;

&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;

&lt;div id="oop1_editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="oop1_filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('oop1_py_src', 'oop1_filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="oop1_run"&gt;Run&lt;/button&gt;
&lt;button id="oop1_show_console"&gt;Output&lt;/button&gt;
&lt;button id="oop1_clear_console"&gt;清除&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="oop1_console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;!-- 必須處理重複執行後機構模擬產生錯誤的問題 --&gt;

&lt;p&gt;以下平面機構動態模擬程式, 僅提供參考.&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

Ace = ace.Editor(editor_id="link_editor", console_id="link_console", container_id="fourbar", storage_id="link_py_src" )

Ace.editor.setValue('''# 導入所需模組
from browser import document as doc
from browser import window
from browser import timer
from browser import html
import math

# 利用 window 擷取 PrairieDraw 程式庫變數物件, 然後以 new 方法轉為 Brython 變數
pdraw = window.PrairieDraw.new
# 利用 window 擷取 PrairieDrawAnim 程式庫變數物件, 然後以 new 方法轉為 Brython 變數
PrairieDrawAnim = window.PrairieDrawAnim.new

# 利用 window 擷取 sylvester 程式庫變數物件 Vector, 並將其 create 方法直接轉為 Brython 變數
# 在 sylvester 中的 $V 簡化變數無法直接在 Brython 程式中引用
vector = window.Vector.create

# 在 "fourbar" 畫布中建立 panim 動態模擬案例
panim = PrairieDrawAnim("fourbar")

# 平面連桿繪圖以 t = 0 起始
t = 0
# 控制轉動方向變數
direction = True

# 繪製不同 t 時間下的平面連桿
def draw():
    global t, direction, fast
    # 設定模擬繪圖範圍
    panim.setUnits(6, 6)
    # 設定箭頭線寬
    panim.setProp("arrowLineWidthPx",2)

    # 起始變數設定
    omega = 1
    length_bar1 = 1
    length_bar2 = 26/18
    length_bar3 = 2
    length_base = 40/18
    time = 0

    # 畫出地面直線
    G = vector([0, -0.5])
    panim.ground(G, vector([0, 1]), 10)

    # 連桿長度與角度計算
    A = t*omega # "theta"
    AD = length_bar1 #length of left bar
    AB = length_base #distance between two stationary pivots
    BC = length_bar3 #length of right bar
    CD = length_bar2 #length of middle bar
    BD = math.sqrt(AD*AD + AB*AB - 2*AD*AB*math.cos(A))
    C = math.acos((BC*BC + CD*CD - BD*BD)/(2*BC*CD))
    ABD = math.asin(CD * math.sin(C) / BD)
    DBC = math.asin(AD * math.sin(A) / BD)
    B = ABD + DBC
    D = math.pi - B - C

    # draw pivot
    pivot_left = vector([AB/-2, 0])
    pivot_right = vector([AB/2, 0])
    panim.pivot(vector([pivot_left.e(1), -0.5]), pivot_left, 0.5)
    panim.pivot(vector([pivot_right.e(1), -0.5]), pivot_right, 0.5)

    # 儲存轉換矩陣
    panim.save()
    #FIRST BAR
    panim.translate(pivot_left)
    panim.rotate(A)
    panim.rod(vector([0,0]), vector([AD,0]), 0.25)
    panim.point(vector([0,0]))

    #SECOND BAR
    panim.translate(vector([AD,0]))
    panim.rotate(A*-1)  #"undo" the original A rotation
    panim.rotate(D)     #rotate by D only
    panim.rod(vector([0,0]), vector([CD,0]), 0.25)
    panim.point(vector([0,0]))

    #THIRD BAR
    panim.translate(vector([CD,0]))
    panim.rotate(math.pi+C)
    panim.rod(vector([0,0]), vector([BC,0]), 0.25)
    panim.point(vector([0,0]))
    # 回復原先的轉換矩陣
    panim.restore()

    panim.point(vector([pivot_right.e(1), 0]))
    # 時間增量
    if direction == True:
        t += 0.08
    else:
        t += -0.08

# 先畫出 t = 0 的連桿機構
draw()

# 將 anim 設為 None
anim = None

def launchAnimation(ev):
    global anim
    # 初始啟動, anim 為 None
    if anim is None:
        # 每 0.08 秒執行一次 draw 函式繪圖
        anim = timer.set_interval(draw, 80)
        # 初始啟動後, 按鈕文字轉為"暫停"
        doc['power'].text = '暫停'
    elif anim == 'hold':
        # 當 anim 為 'hold' 表示曾經暫停後的啟動, 因此持續以 set_interval() 持續旋轉, 且將 power 文字轉為"暫停"
        anim = timer.set_interval(draw, 80)
        doc['power'].text = '暫停'
    else:
        # 初始啟動後, 使用者再按 power, 此時 anim 非 None 也不是 'hold', 因此會執行 clear_interval() 暫停
        # 且將 anim 變數設為 'hold', 且 power 文字轉為"繼續"
        timer.clear_interval(anim)
        anim = 'hold'
        doc['power'].text = '繼續'

def reverse(ev):
    global anim, direction
    # 當 anim 為 hold 時, 按鈕無效
    if anim != "hold":
        if direction == True:
            direction = False
        else:
            direction = True

doc["power"].bind("click", launchAnimation)
doc["reverse"].bind("click", reverse)
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['link_run'].bind('click', Ace.run)
doc['link_show_console'].bind('click', Ace.show_console)
doc['link_clear_console'].bind('click', Ace.clear_console)
&lt;/script&gt;

&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;

&lt;div id="link_editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="link_filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('link_py_src', 'link_filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="link_run"&gt;Run&lt;/button&gt;
&lt;button id="link_show_console"&gt;Output&lt;/button&gt;
&lt;button id="link_clear_console"&gt;清除&lt;/button&gt;
&lt;button id="power"&gt;啟動&lt;/button&gt;
&lt;button id="reverse"&gt;反向&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="link_console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;canvas id="fourbar" width="250" height="250"&gt;&lt;/canvas&gt;&lt;/p&gt;
&lt;p&gt;目前所在頁面, 分別利用 Brython 與 Ace.js 編輯器, 可直接在網誌中執行 Python3 程式, 基本架構為將 Brython 的標準輸出轉到特定 div 標註, 而 Ace.js 編輯器則設為與其內的程式碼相同長度, 但至多只會在頁面中顯示 20 行, 且編輯器內的程式碼使用 12 號字元.&lt;/p&gt;
&lt;p&gt;ace.py 原始碼, 位於 data/py 目錄中, 將原先只能單一呼叫的函式改為物件, 可以在同一頁面中產生案例時, 透過各標註的 id 字串區分各段程式碼, 是本課程 Python3 物件導向程式的實際應用範例, 僅提供參考.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
import sys
import time
import traceback
import javascript

from browser import document as doc, window, alert

if hasattr(window, 'localStorage'):
    from browser.local_storage import storage
else:
    storage = None

class cOutput:

    def __init__(self, target):
        self.target = doc[target]

    def write(self, data):
        self.target.value += str(data)

class Editor():

    def __init__(self, editor_id, console_id, container_id, storage_id):
        self.editor_id = editor_id
        self.console_id = console_id
        self.container_id = container_id
        self.storage_id = storage_id
        self.output = ''

        try:
            self.editor = window.ace.edit(self.editor_id)
            session = self.editor.getSession()
            session.setMode("ace/mode/python")

            self.editor.setOptions({
             'enableLiveAutocompletion': True,
             'enableSnippets': True,
             'highlightActiveLine': False,
             'highlightSelectedWord': True,
             'autoScrollEditorIntoView': True,
             # 'maxLines': session.getLength() 可以根據程式長度設定 editor 列數
             # 設定讓使用者最多可以在畫面中顯示 20 行程式碼
             'maxLines': 20,
             'fontSize': '12pt'
            })
        except:
            from browser import html
            self.editor = html.TEXTAREA(rows=20, cols=70)
            doc[self.editor_id] &amp;lt;= self.editor
            def get_value(): return self.editor.value
            def set_value(x): self.editor.value = x
            self.editor.getValue = get_value
            self.editor.setValue = set_value

    def run(self, *args):
        sys.stdout = cOutput(self.console_id)
        sys.stderr = cOutput(self.console_id)
        doc[self.console_id].value = ''
        src = self.editor.getValue()
        if storage is not None:
           storage[self.storage_id] = src

        t0 = time.perf_counter()
        try:
            #ns = {'__name__':'__main__'}
            # 以 self.editor_id 名稱執行程式
            ns = {'__name__': self.editor_id}
            exec(src, ns)
            state = 1
        except Exception as exc:
            traceback.print_exc(file=sys.stderr)
            state = 0
        self.output = doc[self.console_id].value

        print('&amp;lt;completed in %6.2f ms&amp;gt;' % ((time.perf_counter() - t0) * 1000.0))
        return state

    def show_console(self, ev):
        doc[self.console_id].value = self.output
        doc[self.console_id].cols = 60
        doc[self.console_id].rows = 10

    def clear_console(self, ev):
        doc[self.console_id].value = ""

    def clear_container(self, ev):
        doc[self.container_id].clear()

    # load a Python script
    def load_script(self, evt):
        _name = evt.target.value + '?foo=%s' % time.time()
        self.editor.setValue(open(_name).read())
&lt;/pre&gt;</content><category term="2017fall"></category><category term="CP"></category><category term="Eric6"></category></entry><entry><title>2017 Fall CADP 第五週 - Solvespace &amp; V-rep</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017-fall-course-cadp-w5.html" rel="alternate"></link><published>2017-10-12T11:00:00+08:00</published><updated>2017-10-12T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-10-12:/2017fall/doc/trunk/blog/kmol-2017-fall-course-cadp-w5.html</id><summary type="html">&lt;p&gt;本週起各學員開始利用 Solvesapce 建立 &lt;a href="./../../../raw/ProEMechanism.pdf?name=a48a8c10af4e636b37ff9c8bc6e98ff00af0ac44"&gt;Nutcracker&lt;/a&gt; 系統的零組件, 並且將所完成的零組件顯示在網誌中, 並提供 .slvs 檔案下載.&lt;/p&gt;
&lt;p&gt;請各學員在完成各零件繪圖與組立時, 將練習影片上傳到個人 Vimeo 與 Youtube 區, 並清楚標定影片標題與簡介, 各影片必須明確顯示校名、系名、課程名稱與使用者學號等資訊, 並在各影片的內容說明連回自己的網誌.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;本週起各學員開始利用 Solvesapce 建立 &lt;a href="./../../../raw/ProEMechanism.pdf?name=a48a8c10af4e636b37ff9c8bc6e98ff00af0ac44"&gt;Nutcracker&lt;/a&gt; 系統的零組件, 並且將所完成的零組件顯示在網誌中, 並提供 .slvs 檔案下載.&lt;/p&gt;
&lt;p&gt;請各學員在完成各零件繪圖與組立時, 將練習影片上傳到個人 Vimeo 與 Youtube 區, 並清楚標定影片標題與簡介, 各影片必須明確顯示校名、系名、課程名稱與使用者學號等資訊, 並在各影片的內容說明連回自己的網誌.&lt;/p&gt;


&lt;p&gt;&lt;a href="https://hp.kmol.info:8443/get_page/Angle%20Bracket"&gt;Solvespace 零件繪圖導引&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hp.kmol.info:8443/get_page/Assembly"&gt;Solvespace 零件組立導引&lt;/a&gt;&lt;/p&gt;
&lt;iframe src="./../data/stlviewer/viewstl.html?src=./../project/nutcracker/nutcracker.stl" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;p&gt;各零件間的運動模擬, 可以仿 &lt;a href="https://stemkoski.github.io/Three.js/Model-Animation-Control.html"&gt;https://stemkoski.github.io/Three.js/Model-Animation-Control.html&lt;/a&gt; (&lt;a href="https://github.com/stemkoski/stemkoski.github.com"&gt;倉儲&lt;/a&gt;) 及 &lt;a href="https://threejs.org/examples/webgl_animation_keyframes_json.html"&gt;網際零組件動態模擬技術&lt;/a&gt;達成.&lt;/p&gt;
&lt;iframe src="https://threejs.org/examples/webgl_animation_keyframes_json.html" width="800" height="600"&gt;&lt;/iframe&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CP 第五週 - PyQt5 Calculator</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017-fall-course-cp-w5.html" rel="alternate"></link><published>2017-10-12T10:00:00+08:00</published><updated>2017-10-12T10:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-10-12:/2017fall/doc/trunk/blog/kmol-2017-fall-course-cp-w5.html</id><summary type="html">&lt;p&gt;W5 PyQt5&lt;/p&gt;
</summary><content type="html">&lt;p&gt;W5 PyQt5&lt;/p&gt;


&lt;p&gt;在網誌中使用 &amp;lt;pre class="brush: python"&amp;gt;&amp;lt;/pre&amp;gt; 標註可高亮度顯示 Python 語法, 並加上行數展示程式碼:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
#!/usr/bin/env python
# 當系統安裝多套 Python 解譯器時可以利用上一行指定執行的 Python 版本

# 導入 math 模組
import math

# 導入所需的 PyQt5 模組
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (QApplication, QGridLayout, QLayout, QLineEdit,
        QSizePolicy, QToolButton, QWidget)


# 建立 Button 物件, 且繼承自 QToolButton 物件
class Button(QToolButton):
    '''
    def __init__(self, text, parent=None):
        super(Button, self).__init__(parent)
    '''
    # for Python 3
    def __init__(self, text):
        super().__init__()

        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        self.setText(text)

    def sizeHint(self):
        size = super(Button, self).sizeHint()
        size.setHeight(size.height() + 20)
        size.setWidth(max(size.width(), size.height()))
        return size


class Calculator(QWidget):
    NumDigitButtons = 10

    '''    
    def __init__(self, parent=None):
        super(Calculator, self).__init__(parent)
    '''
    def __init__(self):
        super().__init__()

        self.pendingAdditiveOperator = ''
        self.pendingMultiplicativeOperator = ''

        self.sumInMemory = 0.0
        self.sumSoFar = 0.0
        self.factorSoFar = 0.0
        self.waitingForOperand = True

        self.display = QLineEdit('0')
        self.display.setReadOnly(True)
        self.display.setAlignment(Qt.AlignRight)
        self.display.setMaxLength(15)

        font = self.display.font()
        font.setPointSize(font.pointSize() + 8)
        self.display.setFont(font)

        self.digitButtons = []

        for i in range(Calculator.NumDigitButtons):
            self.digitButtons.append(self.createButton(str(i),
                    self.digitClicked))

        self.pointButton = self.createButton(".", self.pointClicked)
        self.changeSignButton = self.createButton(u"\N{PLUS-MINUS SIGN}",
                self.changeSignClicked)

        self.backspaceButton = self.createButton("Backspace",
                self.backspaceClicked)
        self.clearButton = self.createButton("Clear", self.clear)
        self.clearAllButton = self.createButton("Clear All", self.clearAll)

        self.clearMemoryButton = self.createButton("MC", self.clearMemory)
        self.readMemoryButton = self.createButton("MR", self.readMemory)
        self.setMemoryButton = self.createButton("MS", self.setMemory)
        self.addToMemoryButton = self.createButton("M+", self.addToMemory)

        self.divisionButton = self.createButton(u"\N{DIVISION SIGN}",
                self.multiplicativeOperatorClicked)
        self.timesButton = self.createButton(u"\N{MULTIPLICATION SIGN}",
                self.multiplicativeOperatorClicked)
        self.minusButton = self.createButton("-", self.additiveOperatorClicked)
        self.plusButton = self.createButton("+", self.additiveOperatorClicked)

        self.squareRootButton = self.createButton("Sqrt",
                self.unaryOperatorClicked)
        self.powerButton = self.createButton(u"x\N{SUPERSCRIPT TWO}",
                self.unaryOperatorClicked)
        self.reciprocalButton = self.createButton("1/x",
                self.unaryOperatorClicked)
        self.equalButton = self.createButton("=", self.equalClicked)

        mainLayout = QGridLayout()
        mainLayout.setSizeConstraint(QLayout.SetFixedSize)

        mainLayout.addWidget(self.display, 0, 0, 1, 6)
        mainLayout.addWidget(self.backspaceButton, 1, 0, 1, 2)
        mainLayout.addWidget(self.clearButton, 1, 2, 1, 2)
        mainLayout.addWidget(self.clearAllButton, 1, 4, 1, 2)

        mainLayout.addWidget(self.clearMemoryButton, 2, 0)
        mainLayout.addWidget(self.readMemoryButton, 3, 0)
        mainLayout.addWidget(self.setMemoryButton, 4, 0)
        mainLayout.addWidget(self.addToMemoryButton, 5, 0)

        for i in range(1, Calculator.NumDigitButtons):
            row = ((9 - i) / 3) + 2
            column = ((i - 1) % 3) + 1
            mainLayout.addWidget(self.digitButtons[i], row, column)

        mainLayout.addWidget(self.digitButtons[0], 5, 1)
        mainLayout.addWidget(self.pointButton, 5, 2)
        mainLayout.addWidget(self.changeSignButton, 5, 3)

        mainLayout.addWidget(self.divisionButton, 2, 4)
        mainLayout.addWidget(self.timesButton, 3, 4)
        mainLayout.addWidget(self.minusButton, 4, 4)
        mainLayout.addWidget(self.plusButton, 5, 4)

        mainLayout.addWidget(self.squareRootButton, 2, 5)
        mainLayout.addWidget(self.powerButton, 3, 5)
        mainLayout.addWidget(self.reciprocalButton, 4, 5)
        mainLayout.addWidget(self.equalButton, 5, 5)
        self.setLayout(mainLayout)

        self.setWindowTitle("Calculator")

    def digitClicked(self):
        clickedButton = self.sender()
        digitValue = int(clickedButton.text())

        if self.display.text() == '0' and digitValue == 0.0:
            return

        if self.waitingForOperand:
            self.display.clear()
            self.waitingForOperand = False

        self.display.setText(self.display.text() + str(digitValue))

    def unaryOperatorClicked(self):
        clickedButton = self.sender()
        clickedOperator = clickedButton.text()
        operand = float(self.display.text())

        if clickedOperator == "Sqrt":
            if operand &lt; 0.0:
                self.abortOperation()
                return

            result = math.sqrt(operand)
        elif clickedOperator == u"x\N{SUPERSCRIPT TWO}":
            result = math.pow(operand, 2.0)
        elif clickedOperator == "1/x":
            if operand == 0.0:
                self.abortOperation()
                return

            result = 1.0 / operand

        self.display.setText(str(result))
        self.waitingForOperand = True

    def additiveOperatorClicked(self):
        clickedButton = self.sender()
        clickedOperator = clickedButton.text()
        operand = float(self.display.text())

        if self.pendingMultiplicativeOperator:
            if not self.calculate(operand, self.pendingMultiplicativeOperator):
                self.abortOperation()
                return

            self.display.setText(str(self.factorSoFar))
            operand = self.factorSoFar
            self.factorSoFar = 0.0
            self.pendingMultiplicativeOperator = ''

        if self.pendingAdditiveOperator:
            if not self.calculate(operand, self.pendingAdditiveOperator):
                self.abortOperation()
                return

            self.display.setText(str(self.sumSoFar))
        else:
            self.sumSoFar = operand

        self.pendingAdditiveOperator = clickedOperator
        self.waitingForOperand = True

    def multiplicativeOperatorClicked(self):
        clickedButton = self.sender()
        clickedOperator = clickedButton.text()
        operand = float(self.display.text())

        if self.pendingMultiplicativeOperator:
            if not self.calculate(operand, self.pendingMultiplicativeOperator):
                self.abortOperation()
                return

            self.display.setText(str(self.factorSoFar))
        else:
            self.factorSoFar = operand

        self.pendingMultiplicativeOperator = clickedOperator
        self.waitingForOperand = True

    def equalClicked(self):
        operand = float(self.display.text())

        if self.pendingMultiplicativeOperator:
            if not self.calculate(operand, self.pendingMultiplicativeOperator):
                self.abortOperation()
                return

            operand = self.factorSoFar
            self.factorSoFar = 0.0
            self.pendingMultiplicativeOperator = ''

        if self.pendingAdditiveOperator:
            if not self.calculate(operand, self.pendingAdditiveOperator):
                self.abortOperation()
                return

            self.pendingAdditiveOperator = ''
        else:
            self.sumSoFar = operand

        self.display.setText(str(self.sumSoFar))
        self.sumSoFar = 0.0
        self.waitingForOperand = True

    def pointClicked(self):
        if self.waitingForOperand:
            self.display.setText('0')

        if "." not in self.display.text():
            self.display.setText(self.display.text() + ".")

        self.waitingForOperand = False

    def changeSignClicked(self):
        text = self.display.text()
        value = float(text)

        if value &gt; 0.0:
            text = "-" + text
        elif value &lt; 0.0:
            text = text[1:]

        self.display.setText(text)

    def backspaceClicked(self):
        if self.waitingForOperand:
            return

        text = self.display.text()[:-1]
        if not text:
            text = '0'
            self.waitingForOperand = True

        self.display.setText(text)

    def clear(self):
        if self.waitingForOperand:
            return

        self.display.setText('0')
        self.waitingForOperand = True

    def clearAll(self):
        self.sumSoFar = 0.0
        self.factorSoFar = 0.0
        self.pendingAdditiveOperator = ''
        self.pendingMultiplicativeOperator = ''
        self.display.setText('0')
        self.waitingForOperand = True

    def clearMemory(self):
        self.sumInMemory = 0.0

    def readMemory(self):
        self.display.setText(str(self.sumInMemory))
        self.waitingForOperand = True

    def setMemory(self):
        self.equalClicked()
        self.sumInMemory = float(self.display.text())

    def addToMemory(self):
        self.equalClicked()
        self.sumInMemory += float(self.display.text())

    def createButton(self, text, member):
        button = Button(text)
        button.clicked.connect(member)
        return button

    def abortOperation(self):
        self.clearAll()
        self.display.setText("####")

    def calculate(self, rightOperand, pendingOperator):
        if pendingOperator == "+":
            self.sumSoFar += rightOperand
        elif pendingOperator == "-":
            self.sumSoFar -= rightOperand
        elif pendingOperator == u"\N{MULTIPLICATION SIGN}":
            self.factorSoFar *= rightOperand
        elif pendingOperator == u"\N{DIVISION SIGN}":
            if rightOperand == 0.0:
                return False

            self.factorSoFar /= rightOperand

        return True


if __name__ == '__main__':

    import sys

    app = QApplication(sys.argv)
    calc = Calculator()
    calc.show()
    sys.exit(app.exec_())

&lt;/pre&gt;</content><category term="2017fall"></category><category term="CP"></category><category term="W5"></category><category term="PyQt5"></category></entry><entry><title>2017 Fall CP 第四週 - Brython 程式環境</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017-fall-cadp-w4.html" rel="alternate"></link><published>2017-10-04T11:00:00+08:00</published><updated>2017-10-04T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-10-04:/2017fall/doc/trunk/blog/kmol-2017-fall-cadp-w4.html</id><summary type="html">&lt;p&gt;本週開始將利用 Python3 與 PyQt5 建立一個簡單的計算器, 其中會使用基本的 Python3 程式語法, 也必須了解 Python3 物件導向與視窗事件驅動程式的基本概念. 以下的網頁 Brython 程式架構, 因內容牽涉 Javascript 程式庫的導入與啟動, 僅提供練習 Python3 程式語法與參考用.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;本週開始將利用 Python3 與 PyQt5 建立一個簡單的計算器, 其中會使用基本的 Python3 程式語法, 也必須了解 Python3 物件導向與視窗事件驅動程式的基本概念. 以下的網頁 Brython 程式架構, 因內容牽涉 Javascript 程式庫的導入與啟動, 僅提供練習 Python3 程式語法與參考用.&lt;/p&gt;


&lt;p&gt;首先在網頁中置入可以練習基本 Python3 程式語法的環境, 採用的架構為 Brython 3.3.4 版, 可以在瀏覽器中將使用者的 Python3 程式轉為 Javascript 後執行.&lt;/p&gt;
&lt;!-- 導入 FileSaver 與 filereader --&gt;

&lt;script type="text/javascript" src="./../ace/FileSaver.min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../ace/filereader.js"&gt;&lt;/script&gt;

&lt;!-- 導入最新版的 Brython 標準程式庫 3.3.4 --&gt;

&lt;script type="text/javascript" src="./../data/Brython-3.3.4/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython 時, 設定 pythonpath 為 data/py, 並將 script1.py 放入, 以便取代 3.2.9 之前版本的 script id 導入 --&gt;

&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下執行 Brython 程式 --&gt;

&lt;h3&gt;利用以下的編輯器執行 Python3 程式&lt;/h3&gt;
&lt;p&gt;在 Firefox 中, 以 Preferences - General - Downloads 選擇 "Always ask me where to save files"&lt;/p&gt;
&lt;p&gt;在 Chrome 中, 以 Settings - Advanced - Downloads 選擇 Ask where to save each file before downloading&lt;/p&gt;
&lt;script src="./../ace/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/ext-language_tools.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/mode-python3.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/snippets/python.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;

&lt;script type="text/javascript"&gt;
function doSave(){
    var blob = new Blob([localStorage["py_src"]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById('filename').value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;

&lt;!-- 請注意 Brython 3.3.0 之後的版本, 已經不能使用 script id 模式導入, 改用 pythonpath 中的 script1.py 供後續導入 --&gt;

&lt;script type="text/python3" id="script1"&gt;
import sys
import time
import traceback
import javascript

from browser import document as doc, window, alert

has_ace = True
try:
    editor = window.ace.edit("editor")
    session = editor.getSession()
    session.setMode("ace/mode/python")

    editor.setOptions({
     'enableLiveAutocompletion': True,
     'enableSnippets': True,
     'highlightActiveLine': False,
     'highlightSelectedWord': True
    })
except:
    from browser import html
    editor = html.TEXTAREA(rows=20, cols=70)
    doc["editor"] &lt;= editor
    def get_value(): return editor.value
    def set_value(x):editor.value = x
    editor.getValue = get_value
    editor.setValue = set_value
    has_ace = False

if hasattr(window, 'localStorage'):
    from browser.local_storage import storage
else:
    storage = None

def reset_src():
    if storage is not None and "py_src" in storage:
        editor.setValue(storage["py_src"])
    else:
        editor.setValue('for i in range(10):\n\tprint(i)')
    editor.scrollToRow(0)
    editor.gotoLine(0)

def reset_src_area():
    if storage and "py_src" in storage:
        editor.value = storage["py_src"]
    else:
        editor.value = 'for i in range(10):\n\tprint(i)'

class cOutput:

    def __init__(self,target):
        self.target = doc[target]
    def write(self,data):
        self.target.value += str(data)


#if "console" in doc:
sys.stdout = cOutput("console")
sys.stderr = cOutput("console")

def to_str(xx):
    return str(xx)

info = sys.implementation.version
doc['version'].text = 'Brython %s.%s.%s' % (info.major, info.minor, info.micro)

output = ''

def show_console(ev):
    doc["console"].value = output
    doc["console"].cols = 60
    doc["console"].rows = 10

# load a Python script
def load_script(evt):
    _name = evt.target.value + '?foo=%s' % time.time()
    editor.setValue(open(_name).read())

# run a script, in global namespace if in_globals is True
def run(*args):
    global output
    doc["console"].value = ''
    src = editor.getValue()
    if storage is not None:
       storage["py_src"] = src

    t0 = time.perf_counter()
    try:
        #ns = {'__name__':'__main__'}
        ns = {'__name__':'editor'}
        exec(src, ns)
        state = 1
    except Exception as exc:
        traceback.print_exc(file=sys.stderr)
        state = 0
    output = doc["console"].value

    print('&lt;completed in %6.2f ms&gt;' % ((time.perf_counter() - t0) * 1000.0))
    return state

if has_ace:
    reset_src()
else:
    reset_src_area()

def clear_console(ev):
    doc["console"].value = ""

def clear_container(ev):
    doc["container"].clear()

doc['run'].bind('click',run)
doc['show_console'].bind('click',show_console)
doc['clear_console'].bind('click',clear_console)
doc['clear_container'].bind('click',clear_container)

&lt;/script&gt;

&lt;div id="version"&gt;&lt;/div&gt;

&lt;div id="editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave();"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="run"&gt;Run&lt;/button&gt;
&lt;button id="show_console"&gt;Output&lt;/button&gt;
&lt;button id="clear_console"&gt;清除&lt;/button&gt;
&lt;button id="clear_container"&gt;清除畫布&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div id="common"&gt;&lt;/div&gt;
&lt;!-- container 主要提供網際繪圖用之畫布 --&gt;
&lt;div id="container"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex1(ev):
    script1.editor.setValue('''#ex1 簡單的 for 迴圈範例
    for i in range(10):
        print(i)
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex1'].bind('click',ex1)
&lt;/script&gt;

&lt;p&gt;&lt;a id="ex1"&gt;ex1&lt;/a&gt;-for 迴圈&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex2(ev):
    script1.editor.setValue('''#溫度轉換程式
from browser import document as doc

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp():
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" 
    # 利用 print() 將轉換結果送到 console 區
    print(output_string)

#直接呼叫 convTemp() 執行
convTemp()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex2'].bind('click',ex2)
&lt;/script&gt;

&lt;p&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt;-溫度換算&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex3(ev):
    script1.editor.setValue('''#jansen 多連桿機構驗算
from math import pi, cos, sin, sqrt, acos

radian = 180/pi
degree = pi/180

#PLAP
def plap(ax, ay, ac, bac, bx, by, ccw):
    if ccw == 1:
        cx= ac*cos(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax 
        cy= ac*sin(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay
    else:
        cx= ac*cos(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax 
        cy= ac*sin(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay
    return cx, cy

#PLLP
def pllp(ax, ay, ac, cb, bx, by, cw):
    if cw == 1:
        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 - sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(-ax + bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
    else:
        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
    return cx, cy

ax = -38
ay = 0
# b 為原點
bx = 0
by = 0
cx = 0
cy = 7.8
# m 為配合 PLAP 新增固定點
mx = 30
my = 7.8
# dcm ccw 方向角度
dcm = 30*degree
cd = 15
# 三角形 dcm 為 ccw plap d=(a, cd, dcm, m)
dx, dy = plap(cx, cy, cd, dcm, mx, my, ccw=1)
print("dx=", dx, "dy=", dy)
# 三角形 aed 為 cw pllp e=(a, ae, ed, d)
ae = 41.5
ed = 50
ex, ey = pllp(ax, ay, ae, ed, dx, dy, cw=1)
print("ex=", ex, "ey=", ey)
# 三角形 afe 為 cw pllp f=(a, af, fe, e)
af = 40.1
fe = 55.8
fx, fy = pllp(ax, ay, af, fe, ex, ey, cw=1)
print("fx=", fx, "fy=", fy)
# 三角形 dha 為 cw pllp h=(d, dh, ha, a)
dh = 61.9
ha = 39.3
hx, hy = pllp(dx, dy, dh, ha, ax, ay, cw=1)
print("hx=", hx, "hy=", hy)
# 三角形 hgf 為 cw pllp g=(h, hg, gf, f)
hg = 36.7
gf = 39.4
gx, gy = pllp(hx, hy, hg, gf, fx, fy, cw=1)
print("gx=", gx, "gy=", gy)
# 三角形 hkg 為 cw pllp k=(h, hk, kg, g)
hk = 49
kg = 65.7
kx, ky = pllp(hx, hy, hk, kg, gx, gy, cw=1)
print("kx=", kx, "ky=", ky)
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex3'].bind('click',ex3)
&lt;/script&gt;

&lt;p&gt;&lt;a id="ex3"&gt;ex3&lt;/a&gt;-多連桿機構&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex4(ev):
    script1.editor.setValue('''#ex4 turtle 網際繪圖
import turtle
t=turtle.Turtle()

t.penup()
t.left(45)
t.backward(125)
t.right(45)
t.pendown()

for c in ['red', 'green', 'yellow', 'blue']:
    t.color(c)
    t.forward(75)
    t.left(90)

t1=turtle.Turtle("turtle")
t1.penup()

t1.pendown()
t1.width(3)
for c in ['red', 'blue', 'yellow', 'green', 'purple', 'brown']:
    t1.color(c)
    t1.forward(50)
    t1.left(60)

t1.penup()
t1.left(60)
t1.backward(120)

t1.pendown()
t1.color('red')
t1.write("I love Brython!!")

turtle._Screen().end()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex4'].bind('click',ex4)
&lt;/script&gt;

&lt;p&gt;&lt;a id="ex4"&gt;ex4&lt;/a&gt;-turtle 網際繪圖&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_file(e):
    data = open("./../python_ex/for1.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get"].bind("click", get_file)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_temp1(e):
    data = open("./../python_ex/temp1.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get_temp1"].bind("click", get_temp1)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_ver_and_kw(e):
    data = open("./../python_ex/ver_and_kw.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get_ver_and_kw"].bind("click", get_ver_and_kw)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def jansen(e):
    data = open("./../python_ex/jansen.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["jansen"].bind("click", jansen)
&lt;/script&gt;

&lt;!-- python3 tutorial1-tutorial7 --&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def tutorial(e):
    # 利用 e.target.text 取的對應按鈕的字串, 可以開啟對應的程式檔案
    data = open("./../python_ex/python3_"+e.target.text+".py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["tutorial1"].bind("click", tutorial)
document["tutorial2"].bind("click", tutorial)
document["tutorial3"].bind("click", tutorial)
document["tutorial4"].bind("click", tutorial)
document["tutorial5"].bind("click", tutorial)
document["tutorial6"].bind("click", tutorial)
document["tutorial7"].bind("click", tutorial)
&lt;/script&gt;

&lt;p&gt;&lt;button id="get"&gt;for1.py&lt;/button&gt;&lt;button id="get_temp1"&gt;temp1.py&lt;/button&gt;&lt;button id="get_ver_and_kw"&gt;ver_and_kw.py&lt;/button&gt;&lt;button id="jansen"&gt;jansen.py&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="tutorial1"&gt;tutorial1&lt;/button&gt;&lt;button id="tutorial2"&gt;tutorial2&lt;/button&gt;&lt;button id="tutorial3"&gt;tutorial3&lt;/button&gt;&lt;button id="tutorial4"&gt;tutorial4&lt;/button&gt;&lt;button id="tutorial5"&gt;tutorial5&lt;/button&gt;&lt;button id="tutorial6"&gt;tutorial6&lt;/button&gt;&lt;button id="tutorial7"&gt;tutorial7&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;Jansen 多連桿機構尺寸圖:&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/jansen_sympy.png" width="800" /&gt;&lt;/p&gt;</content><category term="2017fall"></category><category term="CP"></category></entry><entry><title>2017 Fall CADP 第三週 - Fossil SCM &amp; 網誌及投影片</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017-fall-cadp-w3.html" rel="alternate"></link><published>2017-09-29T11:00:00+08:00</published><updated>2017-09-29T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-09-29:/2017fall/doc/trunk/blog/kmol-2017-fall-cadp-w3.html</id><summary type="html">&lt;p&gt;截至本週, 各學員的 Fossil SCM 倉儲已經可以透過 Wiki 儲存各週數位筆記, 並利用 Files 中的 Pelican Blog 與 Reveal.js 投影片架構, 提供各週詳細的學習報告. 使用 Fossil SCM 管理各學員的網誌與投影片的目的, 在建立往後進行協同設計所需的基本架構.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;截至本週, 各學員的 Fossil SCM 倉儲已經可以透過 Wiki 儲存各週數位筆記, 並利用 Files 中的 Pelican Blog 與 Reveal.js 投影片架構, 提供各週詳細的學習報告. 使用 Fossil SCM 管理各學員的網誌與投影片的目的, 在建立往後進行協同設計所需的基本架構.&lt;/p&gt;


&lt;h3&gt;設計組態管理&lt;/h3&gt;
&lt;p&gt;組態 (Configuration) 為組成內容與狀態的配置, 因此軟體組態管理 (SCM, Software Configuration Management) 就是針對軟體開發過程, 有關組成內容與狀態配置的管理.&lt;/p&gt;
&lt;p&gt;由於機械設計主要在表達其固體、流體與軟體元件間的互動配置, 且可交付內容包含口語、文字、2D、3D、數學與實體表達資料, 因此機械設計流程中採用組態管理系統的目的, 就是希望參與機械設計的所有成員, 利用組態管理工具, 有效管理設計過程中所衍生的各種資料內容與配置, 並完整呈現各設計階段的歷程與狀態, 以方便追蹤設計變更並據以持續改進.&lt;/p&gt;
&lt;p&gt;學習要點:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何維護 Fossil SCM Wiki 內容&lt;/li&gt;
&lt;li&gt;如何 clone 倉儲, 如何 open 倉儲&lt;/li&gt;
&lt;li&gt;如何在近端利用 Leo Editor 維護並檢視網誌及投影片&lt;/li&gt;
&lt;li&gt;如何利用網際投影片呈現六種表達資料&lt;/li&gt;
&lt;li&gt;如何利用網誌呈現六種表達資料&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Solvespace Nutcracker 零組件繪圖&lt;/h3&gt;
&lt;p&gt;學習如何在工作平面中繪製 2D 機構模擬圖&lt;/p&gt;
&lt;p&gt;學習如何在不同工作面中, 繪製 2D 輪廓, 進行實體長出或除料&lt;/p&gt;
&lt;p&gt;學習如何切換繪圖群組 (Group), 修改各階段繪圖內容, 完成所需的零組件&lt;/p&gt;
&lt;p&gt;學習如何繪製旋轉長出實體&lt;/p&gt;
&lt;p&gt;學習如何建立新的工作平面&lt;/p&gt;
&lt;p&gt;學習如何利用點線面約束, 將實體零組件與 2D 機構模擬圖結合, 完成平面連桿機構運動模擬, 並輸出特定點的運動軌跡&lt;/p&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CP 第三週 - 視窗命令列與 Fossil SCM 常用指令</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017-fall-cp-w3.html" rel="alternate"></link><published>2017-09-25T11:00:00+08:00</published><updated>2017-09-25T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-09-25:/2017fall/doc/trunk/blog/kmol-2017-fall-cp-w3.html</id><summary type="html">&lt;p&gt;首先要介紹基本的視窗命令提示指令 (Command Prompt Commands), 接著說明如何 clone 帶有網誌與投影片架構檔案的倉儲, 並且複製到各學員的倉儲後, 提交推送到遠端倉儲伺服器.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;首先要介紹基本的視窗命令提示指令 (Command Prompt Commands), 接著說明如何 clone 帶有網誌與投影片架構檔案的倉儲, 並且複製到各學員的倉儲後, 提交推送到遠端倉儲伺服器.&lt;/p&gt;


&lt;h3&gt;命令提示指令視窗&lt;/h3&gt;
&lt;p&gt;開啟視窗操作系統中的命令提示指令視窗時, &amp;gt; 符號左側將顯示目前所處的磁碟代號區, 以及所在的目錄, 例如:&lt;/p&gt;
&lt;pre class="brush:python"&gt;
C:\&gt;
&lt;/pre&gt;

&lt;p&gt;表示目前位於 C: 的 \ 目錄, 而 C: 表示代號為 C 的磁碟槽, 而 \ 就是根目錄.&lt;/p&gt;
&lt;p&gt;若是:&lt;/p&gt;
&lt;pre class="brush:python"&gt;
C:\tmp\fossil\wd\4062&gt;
&lt;/pre&gt;

&lt;p&gt;表示目前位於 C: 的 \tmp\fossil\wd\4062 目錄.&lt;/p&gt;
&lt;p&gt;若要回到 C: 的根目錄：&lt;/p&gt;
&lt;pre class="brush:python"&gt;
C:\tmp\fossil\wd\4062&gt;cd \
C:\&gt;
&lt;/pre&gt;

&lt;p&gt;若要在 C:\ 目錄下建立 4062 目錄，然後更換目錄 (cd 或 chdir) 到 4062:&lt;/p&gt;
&lt;pre class="brush:python"&gt;
C:\&gt;mkdir 4062
C:\&gt;cd 4062
C:\4062&gt;
&lt;/pre&gt;

&lt;p&gt;若要連續跳往上一層目錄：&lt;/p&gt;
&lt;pre class="brush:python"&gt;
C:\tmp\fossil\wd\4062&gt;cd ..
C:\tmp\fossil\wd&gt;cd ..
C:\tmp\fossil&gt;
&lt;/pre&gt;

&lt;p&gt;Cd  chdir 指令的縮寫指令, change directory 更換目錄&lt;/p&gt;
&lt;p&gt;Chdir   change directory 更換目錄&lt;/p&gt;
&lt;p&gt;Cls clear screen 刷新螢幕&lt;/p&gt;
&lt;p&gt;Del delete files 刪除檔案&lt;/p&gt;
&lt;p&gt;Dir display current directory content 列出目錄內容&lt;/p&gt;
&lt;p&gt;Echo    回傳字串內容&lt;/p&gt;
&lt;p&gt;Edit    編輯檔案&lt;/p&gt;
&lt;p&gt;Exit    退出命令提示列&lt;/p&gt;
&lt;p&gt;Ipconfig    列出 Internet Protocol 設定內容&lt;/p&gt;
&lt;p&gt;Md  make directory 的縮寫命令&lt;/p&gt;
&lt;p&gt;Mkdir   make directory 建立目錄&lt;/p&gt;
&lt;p&gt;Move    移動檔案&lt;/p&gt;
&lt;p&gt;Net 顯示或設定網路相關內容&lt;/p&gt;
&lt;p&gt;Netstat 列出使用中的網路連線&lt;/p&gt;
&lt;p&gt;Nslookup    name server lookup&lt;/p&gt;
&lt;p&gt;Path    列出或設定指令搜尋路徑&lt;/p&gt;
&lt;p&gt;Ping    向其他電腦送出 Internet Control Message Protocol (ICMP) Echo Request&lt;/p&gt;
&lt;p&gt;Rd  remove directory 移除目錄縮寫指令&lt;/p&gt;
&lt;p&gt;Ren rename 更改檔案名稱&lt;/p&gt;
&lt;p&gt;Rmdir   remove directory&lt;/p&gt;
&lt;p&gt;Set 顯示或設定環境變數&lt;/p&gt;
&lt;p&gt;Start   執行命令同時開啟另一命令列視窗&lt;/p&gt;
&lt;p&gt;Subst   ｓｕｂｓｔｉｔｕｔｅ　以磁碟代號對應某一目錄&lt;/p&gt;
&lt;p&gt;Taskkill    終止特定命令執行&lt;/p&gt;
&lt;p&gt;Tracert sends Internet Control Message Protocol (ICMP) Echo Request messages to a specified remote computer with increasing Time to Live (TTL) field values and displays the IP address and hostname, if available, of the router interfaces between the source and destination. &lt;/p&gt;
&lt;h3&gt;clone cpb 主機上的 4062 倉儲&lt;/h3&gt;
&lt;p&gt;甲班的 fossil scm 主機符號名稱為 cpa.kmol.info 而乙班則為 cpb.kmol.info, 接下來要將遠端 cpb.kmol.info 主機上的 4062  倉儲複製到近端, 因為主要是取得 4062 倉儲的內容, 而非事後要修改版本內容, 因此 clone 時不綁定帳號:&lt;/p&gt;
&lt;pre class="brush:python"&gt;
Y:\tmp\fossil&gt;fossil clone https://cpb.kmol.info/4062 4062.fossil
&lt;/pre&gt;

&lt;p&gt;接下來建立一個 wd (working directory, 工作目錄) 目錄, 之後會將各倉儲壓縮檔解開到 wd 目錄下, 並且每個倉儲各自解開到, 以倉儲名稱命名的目錄區, 以便區別. 接著在 wd 目錄下, 再建立 4062 目錄, 更換目錄到 4062 目錄之後, 再以 fossil open 開啟倉儲內容至 4062 目錄中.&lt;/p&gt;
&lt;pre class="brush:python"&gt;
Y:\tmp\fossil&gt;mkdir wd
Y:\tmp\fossil&gt;cd wd
Y:\tmp\fossil\wd&gt;mkdir 4062
Y:\tmp\fossil\wd\4062&gt;fossil open ./../../4062.fossil
&lt;/pre&gt;

&lt;h3&gt;clone 學員倉儲時綁定帳號&lt;/h3&gt;
&lt;p&gt;接下來要利用 fossil clone 複製遠端各學員的倉儲, 但在 clone 時就綁定帳號, clone 結束後將在 wd 目錄下建立與倉儲名稱相同的目錄, 並再用 fossil open 將倉儲開啟在工作目錄中．假設學員學號為 406123&lt;/p&gt;
&lt;pre class="brush:python"&gt;
Y:\tmp\fossil&gt;fossil clone https://406123@cpb.kmol.info/406123 406123.fossil
password for 406123:
Y:\tmp\fossil&gt;cd wd
Y:\tmp\fossil\wd&gt;mkdir 406123
Y:\tmp\fossil\wd\406123&gt;fossil open ./../../406123.fossil
&lt;/pre&gt;

&lt;p&gt;接下來就可以將 4062 倉儲中解開的內容, 除了 &lt;em&gt;FOSSIL&lt;/em&gt; 與 &lt;strong&gt;pycache&lt;/strong&gt; 兩個目錄不要複製外, 其餘包含網誌與投影片架構的檔案放入各學員開啟後的倉儲目錄中, 然後新增所有檔案, 並且提交後自動推回遠端, 同時近端的 406123.fossil 也將與遠端及工作目錄中的內容保持同步.&lt;/p&gt;
&lt;pre class="brush:python"&gt;
Y:\tmp\fossil\wd\406123&gt;fossil add .
Y:\tmp\fossil\wd\406123&gt;fossil commit -m "add blog and reveal files"
&lt;/pre&gt;

&lt;h3&gt;clone 學員倉儲時未綁定帳號&lt;/h3&gt;
&lt;p&gt;假如在 fossil clone 時未能綁定帳號, 則隨後的新增與提交無法自動推送, 必須指定用戶帳號, 以手動推送.&lt;/p&gt;
&lt;pre class="brush:python"&gt;
Y:\tmp\fossil&gt;fossil clone https://cpb.kmol.info/406123 406123.fossil
password for 406123:
Y:\tmp\fossil&gt;cd wd
Y:\tmp\fossil\wd&gt;mkdir 406123
Y:\tmp\fossil\wd\406123&gt;fossil open ./../../406123.fossil
&lt;/pre&gt;

&lt;p&gt;複製 4062 倉儲內容時, 記得不要複製 &lt;em&gt;FOSSIL&lt;/em&gt; 與 &lt;strong&gt;pycache&lt;/strong&gt; 兩個目錄．接著就可以新增並且提交, 但 fossil 會顯示自動推送失敗, 因為之前 fossil clone 時沒有綁定帳號.  新增提交後必須手動推送.&lt;/p&gt;
&lt;pre class="brush:python"&gt;
Y:\tmp\fossil\wd\406123&gt;fossil add .
Y:\tmp\fossil\wd\406123&gt;fossil commit -m "add blog and reveal files"
Y:\tmp\fossil\wd\406123&gt;fossil push https://406123@cpb.kmol.info/406123
&lt;/pre&gt;

&lt;p&gt;完成將 blog 與 reveal 投影片送到 cpb.kmol.info 後, 可以透過各學員倉儲下的 /doc/trunk/index.html 檢視最新版投影片, 從 /doc/trunk/blog/index.html 檢視最新版的網誌. 若要查看舊版的資料, 可以將 trunk 換成版次號碼.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cpb.kmol.info/4062/doc/trunk/blog/index.html"&gt;https://cpb.kmol.info/4062/doc/trunk/blog/index.html&lt;/a&gt; 就是 4062 倉儲最新版網誌, 而 &lt;a href="https://cpb.kmol.info/4062/doc/efd9e81386f5ff32/blog/index.html"&gt;https://cpb.kmol.info/4062/doc/efd9e81386f5ff32/blog/index.html&lt;/a&gt; 就是版本號碼為 efd9e81386f5ff32 的舊版本網誌.&lt;/p&gt;</content><category term="2017fall"></category><category term="CP"></category></entry><entry><title>2017 Fall CADP 第二週 - 區網 Fossil 倉儲</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017-fall-cadp-w2.html" rel="alternate"></link><published>2017-09-20T11:00:00+08:00</published><updated>2017-09-20T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-09-20:/2017fall/doc/trunk/blog/kmol-2017-fall-cadp-w2.html</id><summary type="html">&lt;p&gt;本學期起各班透過一台 Ubuntu 16.04 主機, 建立 Fossil SCM 伺服器, 且每一學員發放一個 Fossil SCM 倉儲, 其中各學員可以利用 Wiki 與 Technote 紀錄學習資料外, 還可以將靜態網誌與簡報檔案放入 Files 資料區.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;本學期起各班透過一台 Ubuntu 16.04 主機, 建立 Fossil SCM 伺服器, 且每一學員發放一個 Fossil SCM 倉儲, 其中各學員可以利用 Wiki 與 Technote 紀錄學習資料外, 還可以將靜態網誌與簡報檔案放入 Files 資料區.&lt;/p&gt;


&lt;h3&gt;各班倉儲主機&lt;/h3&gt;
&lt;p&gt;各班學員在下列主機中, 以學號作為倉儲名稱.&lt;/p&gt;
&lt;p&gt;一甲: &lt;a href="https://cpa.kmol.info"&gt;https://cpa.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一乙: &lt;a href="https://cpb.kmol.info"&gt;https://cpb.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二甲: &lt;a href="https://cadpa.kmol.info"&gt;https://cadpa.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二乙: &lt;a href="https://cadpb.kmol.info"&gt;https://cadpb.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;倉儲建立流程&lt;/h3&gt;
&lt;p&gt;為每位學員建立倉儲的設想流程如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;各學員可以獨立維護倉儲內容, 也可以在總管理員的權限下, 為分組學員建立帳號, 逐步導入協同設計&lt;/li&gt;
&lt;li&gt;各學員的倉儲以修課班級命名伺服器, 以學號命名倉儲, 方便依照此一規律擷取各學員的倉儲頁面.&lt;/li&gt;
&lt;li&gt;各學員能以電子郵件收到與新建倉儲相關的連結, 以及帳號密碼.&lt;/li&gt;
&lt;li&gt;必須擴增 Ubuntu ulimits -n 同時開檔的設限範圍 (內定只允許同時開啟 1024 個檔案)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解決方案:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主機名稱可以透過 domain dns 中的 CNAME 別名方式處理, 因為目前所能提供出來的 IPv4/IPv6 雙支援主機, 之前已經都設定了符號名稱.&lt;/li&gt;
&lt;li&gt;fossil init 雖然提供指定管理者的 -A 選項功能, 但是無法直接指定管理者對應密碼, 因此必須建立倉儲之後, 再利用 fossil user 修改密碼, 之後再利用 Gmail 寄出通知信, 其中提供倉儲連結, 登入帳號與密碼等資訊.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;建立各學員倉儲檔案的程式如下, 如前所述, 主要透過兩個 Fossil SCM 指令完成, 在 Windows 採用 Fossil SCM 2.3 版建立所有 .fossil 倉儲時, 將同時以 email 通知各學員. 各學員的 .fossil 檔案再以 sftp 送到伺服主機對應帳號所屬的目錄下. 必須要特別注意的是, 採用 Fossil SCM 2.3 版所建立的 .fossil 倉儲檔案, 在 Ubuntu 操作系統上也必須採用相同版本的 fossil, 否則舊版 fossil 可能無法開啟新版 fossil 程式所建立的倉儲檔.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
import os
import string
import random
# 使用 Gmail 寄信必須導入下列模組
import smtplib
import re
from email.mime.text import MIMEText  
from email.header import Header

# 用來以亂數建立密碼的函式
def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
    '''
    source: https://stackoverflow.com/questions/2257441/random-string-generation-with-upper-case-letters-and-digits-in-python
    '''
    return ''.join(random.choice(chars) for _ in range(size))

# 讀取學員名單, 逐一取得學員學號, 學員名單, 檢查點 1/7
student_data = open("2017fall_list/1b.txt").read()
student_list = student_data.splitlines()

# 利用 gmail smtp 功能寄信
server = smtplib.SMTP('smtp.gmail.com:587')
server.ehlo()
server.starttls()
# 以下必須準備好對應郵件帳號與密碼的外部檔案, 所提供的寄信帳號, 是否可以寄信, 檢查點 2/7
'''
寄信之前必須到 https://www.google.com/settings/security/lesssecureapps 修改權限, 改為較低安全權限
否則無法使用程式寄信!
'''
# 從外部檔案讀取要用來寄信的 gmail 帳號與密碼
# mail.txt 格式為: 電子郵箱,對應密碼, 以逗點隔開, 檢查點 3/7
email_data = open("z:/2017fall/mail.txt").read()
email, email_password= email_data.split(",")
print(email, email_password)
# 是否登入所提供寄信的電子郵箱, 4/7
server.login(email, email_password)
# 不同課程名稱, 與對應主機名稱, 必須配合修改 5/7
course_title = "計算機程式"
fossil_server = "cpb.kmol.info"

for student_num in student_list:
    username = student_num
    repository = username + '.fossil'
    # 利用所提供的字串, 以亂數組成六個字元的密碼
    password = id_generator(6, "23456789abcdef")
    print(student_num, ", " , password)

    # 執行 dos command 指令, 建立倉儲
    os.system("fossil init -A " +username + " " + repository)
    print("已經建立倉儲 " + repository)

    # 執行 dos command 指令, 修改使用者密碼
    os.system("fossil user password " + username + " " + password + " -R " + repository)
    print("已經修改密碼")

    # 利用 Gmail 寄信, 告知各學員倉儲連結與帳號密碼
    # 每一位學員收到的 output 都從這裡 reset
    output = ""
    # 若學號欄為空, 則不寄信
    if student_num != "":
        # output 為寄給每一位學員的資料表格
        mail_content = student_num+' 您好: &lt;br /&gt;&lt;br /&gt; 您在 '+course_title+' 課程中的區域網路倉儲: &lt;a href="https://'+fossil_server+'/'+student_num+'"&gt;https://'+fossil_server+'/'+student_num+'&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;'
        mail_content += '管理帳號為:'+ student_num + '&lt;br /&gt; 管理密碼為: '+ password+'&lt;br /&gt;&lt;br /&gt;'
        print(student_num)
        print(mail_content)
        # 至此 mail_content 已經確定
        # 在測試與實際寄送資料, 也必須配合修改, 檢查點  6/7
        receiver_email = student_num + "@gm.nfu.edu.tw"
        # 測試用
        #receiver_email = student_num+"@mde.tw"
        # 列出收信人 email 位址
        #print(receiver_email)
        #message= MIMEText(mail_content,'plain','UTF-8')
        # 以 html 格式寄信
        message= MIMEText(mail_content,'html','UTF-8')
        message['Subject'] = Header(course_title+" Fossil SCM 帳號通知", 'UTF-8') 
        # 可以先不寄信, 確定格式正確後再開啟, 是否實際寄出信件, 檢查點 7/7
        server.sendmail("gmail_address", receiver_email, message.as_string())
server.quit()
&lt;/pre&gt;

&lt;h3&gt;各班所完成的主機:&lt;/h3&gt;
&lt;p&gt;二甲電腦輔助設計實習: &lt;a href="https://cadpa.kmol.info"&gt;https://cadpa.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二乙電腦輔助設計實習: &lt;a href="https://cadpb.kmol.info"&gt;https://cadpb.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一甲計算機程式: &lt;a href="https://cpa.kmol.info"&gt;https://cpa.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一乙計算機程式: &lt;a href="https://cpb.kmol.info"&gt;https://cpb.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;各學員練習項目&lt;/h3&gt;
&lt;p&gt;登入後修改密碼&lt;/p&gt;
&lt;p&gt;進入 Admin - Configuration 將倉儲 Project Name 設為自己的學號&lt;/p&gt;
&lt;p&gt;建立一個與 Project Name 相同的 Wiki 頁面, 作為 Home 首頁&lt;/p&gt;
&lt;p&gt;練習建立一個 .mp4 操作影片檔, 以 attach 方式附加在 Wiki 首頁&lt;/p&gt;
&lt;p&gt;進入 Admin - Timeline 將倉儲的時區設為台灣時區&lt;/p&gt;
&lt;p&gt;以 fossil clone https://帳號@cadpa.kmol.info/學號  學號.fossil 在近端建立倉儲&lt;/p&gt;
&lt;p&gt;以 fossil open 將學號.fossil 開啟在工作目錄, 以便改版&lt;/p&gt;
&lt;p&gt;改版後以 fossil add . 以及 fossil commit -m "提交訊息" 進行改版資料的提交推送&lt;/p&gt;
&lt;p&gt;從 https://cadpa.kmol.info/4052 clone 內容到近端後, 開啟資料並將 blog 與投影片架構複製到自己的倉儲中&lt;/p&gt;
&lt;p&gt;確認會新增 blog 與投影片內容後, 將改版資料提交推送到遠端&lt;/p&gt;
&lt;p&gt;投影片最新版連結為 /doc/trunk/index.html  (例如: &lt;a href="https://cadpa.kmol.info/4052/doc/trunk/index.html"&gt;4052 投影片&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;blog 最新版連結則為 /doc/trunk/blog/index.html (例如: &lt;a href="https://cadpa.kmol.info/4052/doc/trunk/blog/index.html"&gt;4052 網誌&lt;/a&gt;)&lt;/p&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CADP 第一週 - 分組與實習專案規劃</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017-fall-cadp-w1.html" rel="alternate"></link><published>2017-09-12T11:00:00+08:00</published><updated>2017-09-12T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-09-12:/2017fall/doc/trunk/blog/kmol-2017-fall-cadp-w1.html</id><summary type="html">&lt;p&gt;電腦輔助設計實習第一週課程內容.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;電腦輔助設計實習第一週課程內容.&lt;/p&gt;


&lt;h3&gt;座位與分組&lt;/h3&gt;
&lt;p&gt;由左至右, 按照學號順序入座, 前三後三每六位一組, 每三組分為一大組, 分組目的在練習協同設計, 各組員必須親自練習所有課程內容, 並且每週自行舉證出席狀況, 問答狀況與操作練習狀況.&lt;/p&gt;
&lt;p&gt;每班提供一台系主幹網路伺服器, 用來放置各學員的 Fossil SCM 倉儲練習影片與上課心得資料, 最後各學員 Fossil SCM 倉儲將會與 Github 倉儲進行資料同步, 以便下學期能在 Fossil SCM 與 Github 平台上進行協同產品設計.&lt;/p&gt;
&lt;p&gt;期中考前主要為 Nutcracker 零組件 Solvespace 與 Onshape 繪圖與 V-rep 模擬, 期中考後則納入 Arduino 伺服馬達控制與專案零組件設計與 3D 列印製作.&lt;/p&gt;
&lt;h3&gt;電腦輔助設計實習專案&lt;/h3&gt;
&lt;p&gt;2017 年 Fall 電腦輔助設計實習的專題題目為"機電資整合鋼球運動系統" (infomechatronic linkage marble machine), 範例機電系統可參考:&lt;/p&gt;
&lt;iframe width="640" height="340" src="https://www.youtube.com/embed/as_ul9h8ELU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="640" height="340" src="https://www.youtube.com/embed/6FLB-FcX0CY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="640" height="340" src="https://www.youtube.com/embed/K5MVNnVbWa8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="640" height="340" src="https://www.youtube.com/embed/vbCAhGsOlk4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="640" height="340" src="https://www.youtube.com/embed/1oxvMaZ3Db0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="640" height="340" src="https://www.youtube.com/embed/-7OCMDMhasg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="640" height="340" src="https://www.youtube.com/embed/pjL7vg9CjQE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="640" height="340" src="https://www.youtube.com/embed/lElc7kVUBko" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="640" height="340" src="https://www.youtube.com/embed/k7QkfD651Tc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;機電資整合鋼球運動系統設計要求&lt;/h3&gt;
&lt;p&gt;其中, 連桿機構零組件&lt;span style="background-color: #ffff00;"&gt;必須採用 &lt;a href="http://solvespace.com"&gt;Solvespace&lt;/a&gt; 與 &lt;a href="https://www.onshape.com/"&gt;Onshape&lt;/a&gt; 繪製, 機構與鋼球運動模擬必須採用 &lt;a href="http://www.coppeliarobotics.com/"&gt;V-rep&lt;/a&gt; 進行, 控制 &lt;a href="http://www.coppeliarobotics.com/"&gt;V-rep&lt;/a&gt; 模擬系統的外部程式套件, 必須採用 &lt;a href="http://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm"&gt;Python3 remote API&lt;/a&gt; 架構完成, 電子電機系統必須採用 AutoDesk &lt;a href="https://www.tinkercad.com/"&gt;TinkerCAD&lt;/a&gt; 模擬, 用來記錄鋼球通過關鍵點次數, 以及鋼球運動總距離及總爬升高度的資訊系統, 則必須採用 Python3 以及 PyQt5 建置, 而主要機構零組件可以採 3D 印表機列印&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;各組所完成的"機電資整合鋼球運動系統", 必須包含一個主要的鋼球運送機構模組 (以下稱為主模組), 並且能夠納入各學員所完成的軌道機構模組 (以下稱為軌道模組), 進行循環運動, 且&lt;span style="background-color: #ffff00;"&gt;整體系統的尺寸必須能夠放入郵局 &lt;a href="https://www.post.gov.tw/post/internet/box/index_2_2.jsp?id=3"&gt;Box2 紙箱&lt;/a&gt;中(規格: 23×18×19(cm)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;當各組開始啟動"機電資整合鋼球運動系統"專題製作時, 各學員必須將所有細節紀錄在 &lt;a href="https://cadpa.kmol.info"&gt;二甲&lt;/a&gt; 與 &lt;a href="https://cadpb.kmol.info"&gt;二乙&lt;/a&gt; 所分配到的 &lt;a href="https://www.fossil-scm.org"&gt;Fossil SCM&lt;/a&gt; 伺服器主機中, 且各學員在近端隨身碟必須自行保全所有與專題相關的資料, 專題完成後, 再將各學員的 &lt;a href="https://www.fossil-scm.org"&gt;Fossil SCM&lt;/a&gt; 倉儲同步到 &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; 倉儲.&lt;/p&gt;
&lt;p&gt;各班依照座位, 前後三人共六人為一小組, 必須完成一套主模組設計, 各學員則分別提供一組軌道模組配合, 進行循環運動模擬. 期中考之後則每三小組成一大組, 根據學員投票決定&lt;span style="background-color: #ffff00;"&gt;實作一組主模組, 各學員則必須實作一組軌道系統與主模組配合運作&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;了解可攜程式系統架構與用法&lt;/h3&gt;
&lt;p&gt;start.bat 啟動, stop.bat 關閉, &lt;a href="http://www.scintilla.org/SciTE.html"&gt;SciTE&lt;/a&gt; 可以執行 .py 與 .c 程式, &lt;a href="http://www.scintilla.org/SciTE.html"&gt;SciTE&lt;/a&gt; 開啟 y:\launchLeo.py 執行後, 可以開啟 Leo Editor, Leo Editor 主要用來建立 &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 網誌與 &lt;a href="https://github.com/hakimel/reveal.js/"&gt;Reveal.js&lt;/a&gt; 簡報投影片, 還可存放相關操作關鍵內容或其他參考資料.&lt;/p&gt;
&lt;p&gt;在 dos 命令視窗執行 eric6, 可以開啟 &lt;a href="https://eric-ide.python-projects.org/eric-download.html"&gt;Eric6 IDE&lt;/a&gt; 環境, 可以用來開發 PyQt5 視窗程式, 可以與 &lt;a href="http://www.coppeliarobotics.com/"&gt;V-rep&lt;/a&gt; 機構模擬整合使用, 加上實體機電系統, 達到機電資電腦輔助設計與製造的專案實習.&lt;/p&gt;
&lt;h3&gt;了解 Fossil SCM 用法&lt;/h3&gt;
&lt;p&gt;fossil init 建立倉儲&lt;/p&gt;
&lt;p&gt;fossil ui 了解網際功能&lt;/p&gt;
&lt;h3&gt;了解 Solvespace 零組件繪圖&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://solvespace.com"&gt;Solvespace&lt;/a&gt; 為一套小型的參數式 CAD 套件, 為 GPL 授權程式, &lt;a href="https://www.onshape.com/"&gt;Onshape&lt;/a&gt; 則為全雲端參數式 CAD 系統, 目前提供免費教育帳號使用.&lt;/p&gt;
&lt;p&gt;Solvespace Sketch in new workplane 的用法&lt;/p&gt;
&lt;p&gt;Solvespace Properties browser 的用法&lt;/p&gt;
&lt;p&gt;Solvespace Constraint distance, diameter, length 的用法&lt;/p&gt;
&lt;p&gt;Solvespace Constraint point on line, curve, plane, point 的用法&lt;/p&gt;
&lt;p&gt;Solvespace Constraint to be parallel or tangent 的用法&lt;/p&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CP 第一週 - 分組與可攜環境</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017-fall-cp-w1.html" rel="alternate"></link><published>2017-09-11T11:00:00+08:00</published><updated>2017-09-11T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-09-11:/2017fall/doc/trunk/blog/kmol-2017-fall-cp-w1.html</id><summary type="html">&lt;p&gt;計算機程式第一週課程內容.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;計算機程式第一週課程內容.&lt;/p&gt;


&lt;h3&gt;課堂通知&lt;/h3&gt;
&lt;p&gt;一乙自下週起連續三週, 各多上一堂課, 以補 10/9 的彈性放假.&lt;/p&gt;
&lt;p&gt;下週起, 每位同學都要準備 3.0 規格以上的 USB 隨身碟, 32 GB 或以上容量, 100 頁 B5 大小的筆記本, 還有耳機.&lt;/p&gt;
&lt;p&gt;USB 隨身碟用來存放可攜系統與每週在近端倉儲改版內容與操作影片 mp4 檔案.&lt;/p&gt;
&lt;p&gt;本課程的操作影片拍攝建議使用 &lt;a href="https://getsharex.com/"&gt;https://getsharex.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;筆記本用來詳細記錄各種操作細節, 而耳機則用來觀看課程教學影片用.&lt;/p&gt;
&lt;h3&gt;課堂練習&lt;/h3&gt;
&lt;p&gt;點擊 start.bat 啟動隨身系統, 在 SCiTE 編輯器中練習執行 calculator.py 與 helloworld.c&lt;/p&gt;
&lt;p&gt;calculator.py 可以利用 PyQt5 example calculator 關鍵字搜尋, 而 ANSI (American National Standard Institute) C 則可以透過 ANSI C hello world 關鍵字搜尋.&lt;/p&gt;
&lt;p&gt;了解如何執行 Python3 與 ANSI 程式之後, 請利用 Google 搜尋 Fossil SCM 的相關介紹, 並且回想一下:&lt;/p&gt;
&lt;p&gt;何謂機械設計?&lt;/p&gt;
&lt;p&gt;所謂機械設計, 就是透過詳細思慮考量, 完成包括固體、流體與軟體等互動元件間之精巧配置, 使其展現特定功能之具體規劃表達.&lt;/p&gt;
&lt;p&gt;工程師有那六種表達方式? 口語, 文字, 2D, 3D, 數學理論與實作表達.&lt;/p&gt;
&lt;p&gt;創造力的三個基本要素: 自學力, 執行力與想像力.&lt;/p&gt;
&lt;p&gt;自學力在提升自我解題能力, 執行力則在運用所學解決問題, 當累積一定經驗後, 就能透過想像、自學與執行過程之整合運用, 創造出具效能的創新產品.&lt;/p&gt;
&lt;p&gt;接下來將要練習如何開啟 Leo Editor, 開啟 Leo Editor 專案, 如何使用 Fossil SCM 與 Eric6 IDE, 請大家要仔細筆記, 並且透過實際操作, 了解各種系統的特性與用法.&lt;/p&gt;
&lt;h3&gt;Leo Editor&lt;/h3&gt;
&lt;p&gt;開啟與編輯 Reveal.js 投影片&lt;/p&gt;
&lt;p&gt;編輯 Pelican 靜態 blog&lt;/p&gt;
&lt;p&gt;利用 IPv4 WWW 伺服器在近端檢視 Pellican Blog&lt;/p&gt;
&lt;p&gt;Pelican Blog 有哪些功能?&lt;/p&gt;
&lt;p&gt;Reveal.js 有哪些功能?&lt;/p&gt;
&lt;p&gt;當您熟悉如何利用 Leo Editor 建立簡報與網誌之後, 就是準備以 Fossil SCM 來管理這些文字系統了.&lt;/p&gt;
&lt;h3&gt;Fossil SCM&lt;/h3&gt;
&lt;p&gt;fossil init 倉儲名稱.fossil&lt;/p&gt;
&lt;p&gt;fossil ui&lt;/p&gt;
&lt;p&gt;fossil open&lt;/p&gt;
&lt;p&gt;fossil clone&lt;/p&gt;
&lt;p&gt;fossil add .&lt;/p&gt;
&lt;p&gt;fossil commit -m --no-warnings&lt;/p&gt;
&lt;p&gt;fossil update&lt;/p&gt;
&lt;p&gt;請仔細回想上述每一個操作細節的特性, 我們終於要使用 Eric6 IDE 學習 Python3 計算機程式了.&lt;/p&gt;
&lt;h3&gt;課程網誌加入 disqus 留言區&lt;/h3&gt;
&lt;p&gt;目前使用的是 &lt;a href="https://disqus.com/"&gt;https://disqus.com/&lt;/a&gt; 所提供的免費留言區, 以 &lt;a href="https://kmolab.github.io/blog"&gt;https://kmolab.github.io/blog&lt;/a&gt; 與 &lt;a href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog"&gt;https://mde1a1.kmol.info/2017fall/doc/trunk/blog&lt;/a&gt; 為例, 採用 course At mde dot tw 專用帳號登記, 並且在 trusted domains 將 kmolab.github.io 與 mde1a1.kmol.info 納入, 就可以讓一個留言區, 在不同的網誌中使用.&lt;/p&gt;
&lt;p&gt;當 Pelican Blog 內容中的 tipuesearch_content.js 過長時, Fossil SCM 在提交推送時會發出 "Abandoning commit due to long lines in tipuesearch_content.js 的錯誤, 而中止推送.&lt;/p&gt;
&lt;p&gt;因此在提交 Pelican Blog 時, 必須使用:&lt;/p&gt;
&lt;p&gt;fossil commit -m "your commit message" --no-warnings&lt;/p&gt;
&lt;p&gt;同時, 在使用 theme/pelican-bootstrap3 轉換遠端網誌加入 disqus 留言區時, 必須要注意 plugin/tipue_search/ tipue_search.py 中必須配合建立 tipuesearch_content.json, 目的在可以根據關鍵字建立搜尋資料檔.&lt;/p&gt;
&lt;p&gt;總結上述, 利用近端按鈕建立網誌的目的, 在讓使用者可以直接在近端檢查內容. 利用遠端按鈕建立網誌的目的, 則在加入對應的 disqus 留言區.&lt;/p&gt;</content><category term="2017fall"></category><category term="CP"></category></entry><entry><title>2017 Fall 各班課程日期</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017-fall-courses-date.html" rel="alternate"></link><published>2017-08-30T11:00:00+08:00</published><updated>2017-08-30T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-08-30:/2017fall/doc/trunk/blog/kmol-2017-fall-courses-date.html</id><summary type="html">&lt;p&gt;利用 Brython 程式列印各班課程日期.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;利用 Brython 程式列印各班課程日期.&lt;/p&gt;


&lt;!-- 導入最新版的 Brython 標準程式庫 3.3.1 --&gt;

&lt;script type="text/javascript" src="./../data/Brython-3.3.1/brython.js"&gt;
&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/Brython-3.3.1/brython_stdlib.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython 時, 設定 pythonpath 為 data/py, 並將 script1.py 放入, 以便取代 3.2.9 之前版本的 script id 導入 --&gt;

&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下執行 Brython 程式 --&gt;

&lt;p&gt;列出 2017 Fall 各班課程日期:&lt;/p&gt;
&lt;div id="cal2"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document, html
import calendar
import locale
import math

cal2 = document["cal2"]

def getClassdate(year=2017, startM=9, startD=11, w=0, note=""):
    # w=0 表示課程排在星期一
    # startM 表示開學月份, startD 表示開學日
    # note 為課程初始告示
    # default calendar MONDAY is the first day of the week
    # 每學期共有 18 週, 下學期必須處理跨年
    # 準備納入放假日檢查與列印
    totalW = 18
    count = 0
    # output = "2017 Spring 2bCD (三) 08:10-12:00 各週上課日期: "
    output = note + html.BR()
    # 若必須全年搜尋則 7 改為 12, 但是因為只有 18 週, 因此邏輯要修改讓程式較快結束
    for month in range(startM, 13):
        monthArray = calendar.monthcalendar(year, month)
        for week in range(len(monthArray)):
            weekArray = monthArray[week]
            # 只需要列出星期 (w+1)
            # 不計第零週
            if weekArray[w] != 0:
                if month == startM:
                    if weekArray[w] &gt;= startD:
                        count += 1
                        if count &lt;= totalW:
                            if (month == 10 and weekArray[w] == 9) or (month == 11 and weekArray[w] == 24):
                                output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + "(放假), "
                            else:
                                output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + ", "
                else:
                    count += 1
                    if count &lt;=  totalW:
                        if (month == 10 and weekArray[w] == 9) or (month == 11 and weekArray[w] == 24):
                            output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + "(放假), "
                        else:
                            output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + ", "
    # 若列印週數不足, 則需跨年
    if totalW &gt; count:
        for month in range(1, math.ceil((totalW-count)/4)+1):
            monthArray = calendar.monthcalendar(year+1, month)
            for week in range(len(monthArray)):
                weekArray = monthArray[week]
                # 只需要列出星期 (w+1)
                # 不計第零週
                if weekArray[w] != 0:
                    count += 1
                    if count &lt;=  totalW:
                        if month == 1 and weekArray[w] == 1:
                            output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + "(放假), "
                        else:
                            output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + ", "
    cal2 &lt;= output

# 1b 計算機程式 (一 w=0)
getClassdate(year=2017, startM=9, startD=11, w=0, note="2017 Fall 1bCP (一) 13:20-16:10 各週上課日期: ")
cal2 &lt;= html.BR() + html.BR()
# 1a 計算機程式 (四 w=3)
getClassdate(year=2017, startM=9, startD=11, w=3, note="2017 Fall 1aCP (四) 08:10-12:00 各週上課日期: ")
cal2 &lt;= html.BR() + html.BR()
# 2a 電腦輔助設計實習 (四 w=3)
getClassdate(year=2017, startM=9, startD=11, w=3, note="2017 Fall 2aCADP (四) 13:20-16:10 各週上課日期: ")
cal2 &lt;= html.BR() + html.BR()
# 2b 電腦輔助設計實習 (五 w=4)
getClassdate(year=2017, startM=9, startD=11, w=4, note="2017 Fall 2bCADP (五) 13:20-16:10 各週上課日期: ")
cal2 &lt;= html.BR() + html.BR()
&lt;/script&gt;</content><category term="brython"></category><category term="2017fall"></category></entry><entry><title>網際 Brython 3.3.1 程式執行環境</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-brython-editor-331.html" rel="alternate"></link><published>2017-03-14T11:00:00+08:00</published><updated>2017-03-14T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-03-14:/2017fall/doc/trunk/blog/kmol-brython-editor-331.html</id><summary type="html">&lt;p&gt;Brython 程式環境可以用來練習許多 Python3 的簡單語法, 也可以納入 Javascript 程式庫, 利用 Ajax 模式結合網際瀏覽器與伺服器上的資源解決協同產品設計流程上的問題.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Brython 程式環境可以用來練習許多 Python3 的簡單語法, 也可以納入 Javascript 程式庫, 利用 Ajax 模式結合網際瀏覽器與伺服器上的資源解決協同產品設計流程上的問題.&lt;/p&gt;


&lt;!-- 導入 FileSaver 與 filereader --&gt;

&lt;script type="text/javascript" src="./../ace/FileSaver.min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../ace/filereader.js"&gt;&lt;/script&gt;

&lt;!-- 導入最新版的 Brython 標準程式庫 3.3.1 --&gt;

&lt;script type="text/javascript" src="./../data/Brython-3.3.1/brython.js"&gt;
&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/Brython-3.3.1/brython_stdlib.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython 時, 設定 pythonpath 為 data/py, 並將 script1.py 放入, 以便取代 3.2.9 之前版本的 script id 導入 --&gt;

&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下執行 Brython 程式 --&gt;

&lt;p&gt;列出 2017 Spring 協同產品設計實習課程日期之 Python 程式碼如下:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&lt;div id="cal2"&gt;&lt;/div&gt;
&lt;script type="text/python3"&gt;
from browser import document, html
import calendar
import locale

cal2 = document["cal2"]

def getClassdate(year=2017, startM=2, startD=20, w=0, note=""):
    # w=0 表示課程排在星期一
    # startM 表示開學月份, startD 表示開學日
    # note 為課程初始告示
    # default calendar MONDAY is the first day of the week
    # 每學期共有 18 週
    totalW = 18
    count = 0
    # output = "2017 Spring 2bCD (三) 08:10-12:00 各週上課日期: "
    output = note + html.BR()
    # 若必須全年搜尋則 7 改為 12, 但是因為只有 18 週, 因此邏輯要修改讓程式較快結束
    for month in range(startM, 7):
        monthArray = calendar.monthcalendar(2017, month)
        for week in range(len(monthArray)):
            weekArray = monthArray[week]
            # 只需要列出星期 (w+1)
            if weekArray[w] != 0:
                if month == startM:
                    if weekArray[w] &gt; startD:
                        count += 1
                        if count &lt;= totalW:
                            if month == 3 and weekArray[w] == 31:
                                output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + "(放假), "
                            else:
                                output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + ", "
                else:
                    count += 1
                    if count &lt;=  totalW:
                        if month == 3 and weekArray[w] == 31:
                            output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + "(放假), "
                        else:
                            output += "w"+str(count)+"-"+ str(month)+ "/" + str(weekArray[w]) + ", "
    cal2 &lt;= output

# 2b 協同產品設計實習 (三 w=2)
getClassdate(year=2017, startM=2, startD=20, w=2, note="2017 Spring 2bCD (三) 08:10-12:00 各週上課日期: ")
cal2 &lt;= html.BR() + html.BR()
# 2a 協同產品設計實習 (四 w=3)
getClassdate(year=2017, startM=2, startD=20, w=3, note="2017 Spring 2aCD (四) 08:10-12:00 各週上課日期: ")
cal2 &lt;= html.BR() + html.BR()
# 1a 網際內容管理 (五 w=4)
getClassdate(year=2017, startM=2, startD=20, w=4, note="2017 Spring 1aWCM (五) 13:20-16:10 各週上課日期: ")
cal2 &lt;= html.BR() + html.BR()
# VE1a 網際內容管理 (五 w=4)
getClassdate(year=2017, startM=2, startD=20, w=4, note="2017 Spring VE1aCP (五) 18:30-20:00 各週上課日期: ")
cal2 &lt;= html.BR() + html.BR()
&lt;/script&gt;
&lt;/pre&gt;

&lt;h3&gt;利用伺服器執行 Python3 程式&lt;/h3&gt;
&lt;p&gt;Jupyterhub: &lt;a href="https://8888.kmol.info:9443"&gt;https://8888.kmol.info:9443&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;利用以下的編輯器執行 Python3 程式&lt;/h3&gt;
&lt;p&gt;在 Firefox 中, 以 Preferences - General - Downloads 選擇"Always ask me where to save files"&lt;/p&gt;
&lt;p&gt;在 Chrome 中, 以 Settings - Advanced - Downloads 選擇 Ask where to save each file before downloading&lt;/p&gt;
&lt;script src="./../ace/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/ext-language_tools.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/mode-python3.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/snippets/python.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;

&lt;script type="text/javascript"&gt;
function doSave(){
    var blob = new Blob([localStorage["py_src"]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById('filename').value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;

&lt;!-- 請注意 Brython 3.3.0 之後的版本, 已經不能使用 script id 模式導入, 改用 pythonpath 中的 script1.py 供後續導入 --&gt;

&lt;script type="text/python3" id="script1"&gt;
import sys
import time
import traceback
import javascript

from browser import document as doc, window, alert

has_ace = True
try:
    editor = window.ace.edit("editor")
    session = editor.getSession()
    session.setMode("ace/mode/python")

    editor.setOptions({
     'enableLiveAutocompletion': True,
     'enableSnippets': True,
     'highlightActiveLine': False,
     'highlightSelectedWord': True
    })
except:
    from browser import html
    editor = html.TEXTAREA(rows=20, cols=70)
    doc["editor"] &lt;= editor
    def get_value(): return editor.value
    def set_value(x):editor.value = x
    editor.getValue = get_value
    editor.setValue = set_value
    has_ace = False

if hasattr(window, 'localStorage'):
    from browser.local_storage import storage
else:
    storage = None

def reset_src():
    if storage is not None and "py_src" in storage:
        editor.setValue(storage["py_src"])
    else:
        editor.setValue('for i in range(10):\n\tprint(i)')
    editor.scrollToRow(0)
    editor.gotoLine(0)

def reset_src_area():
    if storage and "py_src" in storage:
        editor.value = storage["py_src"]
    else:
        editor.value = 'for i in range(10):\n\tprint(i)'

class cOutput:

    def __init__(self,target):
        self.target = doc[target]
    def write(self,data):
        self.target.value += str(data)


#if "console" in doc:
sys.stdout = cOutput("console")
sys.stderr = cOutput("console")

def to_str(xx):
    return str(xx)

info = sys.implementation.version
doc['version'].text = 'Brython %s.%s.%s' % (info.major, info.minor, info.micro)

output = ''

def show_console(ev):
    doc["console"].value = output
    doc["console"].cols = 60
    doc["console"].rows = 10

# load a Python script
def load_script(evt):
    _name = evt.target.value + '?foo=%s' % time.time()
    editor.setValue(open(_name).read())

# run a script, in global namespace if in_globals is True
def run(*args):
    global output
    doc["console"].value = ''
    src = editor.getValue()
    if storage is not None:
       storage["py_src"] = src

    t0 = time.perf_counter()
    try:
        #ns = {'__name__':'__main__'}
        ns = {'__name__':'editor'}
        exec(src, ns)
        state = 1
    except Exception as exc:
        traceback.print_exc(file=sys.stderr)
        state = 0
    output = doc["console"].value

    print('&lt;completed in %6.2f ms&gt;' % ((time.perf_counter() - t0) * 1000.0))
    return state

if has_ace:
    reset_src()
else:
    reset_src_area()

def clear_console(ev):
    doc["console"].value = ""

doc['run'].bind('click',run)
doc['show_console'].bind('click',show_console)
doc['clear_console'].bind('click',clear_console)
&lt;/script&gt;

&lt;div id="version"&gt;&lt;/div&gt;

&lt;div id="editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave();"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="run"&gt;Run&lt;/button&gt;
&lt;button id="show_console"&gt;Output&lt;/button&gt;
&lt;button id="clear_console"&gt;清除&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div id="common"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex1(ev):
    script1.editor.setValue('''#ex1 簡單的 for 迴圈範例
    for i in range(10):
        print(i)
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex1'].bind('click',ex1)
&lt;/script&gt;

&lt;p&gt;&lt;a id="ex1"&gt;ex1&lt;/a&gt;-for 迴圈&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex2(ev):
    script1.editor.setValue('''#溫度轉換程式
from browser import document as doc

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp():
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" 
    # 利用 print() 將轉換結果送到 console 區
    print(output_string)

#直接呼叫 convTemp() 執行
convTemp()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex2'].bind('click',ex2)
&lt;/script&gt;

&lt;p&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt;-溫度換算&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex3(ev):
    script1.editor.setValue('''#jansen 多連桿機構驗算
from math import pi, cos, sin, sqrt, acos

radian = 180/pi
degree = pi/180

#PLAP
def plap(ax, ay, ac, bac, bx, by, ccw):
    if ccw == 1:
        cx= ac*cos(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax 
        cy= ac*sin(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay
    else:
        cx= ac*cos(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax 
        cy= ac*sin(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay
    return cx, cy

#PLLP
def pllp(ax, ay, ac, cb, bx, by, cw):
    if cw == 1:
        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 - sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(-ax + bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
    else:
        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
    return cx, cy

ax = -38
ay = 0
# b 為原點
bx = 0
by = 0
cx = 0
cy = 7.8
# m 為配合 PLAP 新增固定點
mx = 30
my = 7.8
# dcm ccw 方向角度
dcm = 30*degree
cd = 15
# 三角形 dcm 為 ccw plap d=(a, cd, dcm, m)
dx, dy = plap(cx, cy, cd, dcm, mx, my, ccw=1)
print("dx=", dx, "dy=", dy)
# 三角形 aed 為 cw pllp e=(a, ae, ed, d)
ae = 41.5
ed = 50
ex, ey = pllp(ax, ay, ae, ed, dx, dy, cw=1)
print("ex=", ex, "ey=", ey)
# 三角形 afe 為 cw pllp f=(a, af, fe, e)
af = 40.1
fe = 55.8
fx, fy = pllp(ax, ay, af, fe, ex, ey, cw=1)
print("fx=", fx, "fy=", fy)
# 三角形 dha 為 cw pllp h=(d, dh, ha, a)
dh = 61.9
ha = 39.3
hx, hy = pllp(dx, dy, dh, ha, ax, ay, cw=1)
print("hx=", hx, "hy=", hy)
# 三角形 hgf 為 cw pllp g=(h, hg, gf, f)
hg = 36.7
gf = 39.4
gx, gy = pllp(hx, hy, hg, gf, fx, fy, cw=1)
print("gx=", gx, "gy=", gy)
# 三角形 hkg 為 cw pllp k=(h, hk, kg, g)
hk = 49
kg = 65.7
kx, ky = pllp(hx, hy, hk, kg, gx, gy, cw=1)
print("kx=", kx, "ky=", ky)
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex3'].bind('click',ex3)
&lt;/script&gt;

&lt;p&gt;&lt;a id="ex3"&gt;ex3&lt;/a&gt;-多連桿機構&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_file(e):
    data = open("./../python_ex/for1.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get"].bind("click", get_file)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_temp1(e):
    data = open("./../python_ex/temp1.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get_temp1"].bind("click", get_temp1)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_ver_and_kw(e):
    data = open("./../python_ex/ver_and_kw.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get_ver_and_kw"].bind("click", get_ver_and_kw)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def jansen(e):
    data = open("./../python_ex/jansen.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["jansen"].bind("click", jansen)
&lt;/script&gt;

&lt;p&gt;&lt;button id="get"&gt;for1.py&lt;/button&gt;&lt;button id="get_temp1"&gt;temp1.py&lt;/button&gt;&lt;button id="get_ver_and_kw"&gt;ver_and_kw.py&lt;/button&gt;&lt;button id="jansen"&gt;jansen.py&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;Jansen 多連桿機構尺寸圖:&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/jansen_sympy.png" width="800" /&gt;&lt;/p&gt;</content><category term="brython"></category><category term="w1"></category></entry><entry><title>Ubuntu 16.04 環境下啟動 Stunnel 與 Fossil SCM</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017spring-ubuntu-stunnel-fossil.html" rel="alternate"></link><published>2017-03-04T12:00:00+08:00</published><updated>2017-03-04T12:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-03-04:/2017fall/doc/trunk/blog/kmol-2017spring-ubuntu-stunnel-fossil.html</id><summary type="html">&lt;p&gt;說明如何在 Ubuntu 操作系統中, 安裝並設定 Stunnel 後與 Fossil SCM server 結合啟動.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;說明如何在 Ubuntu 操作系統中, 安裝並設定 Stunnel 後與 Fossil SCM server 結合啟動.&lt;/p&gt;


&lt;h3&gt;Stunnel 與 Fossil SCM 安裝&lt;/h3&gt;
&lt;p&gt;sudo apt update&lt;/p&gt;
&lt;p&gt;sudo apt install stunnel4 -y&lt;/p&gt;
&lt;p&gt;sudo apt install fossil&lt;/p&gt;
&lt;h2&gt;環境變數與開機啟動設定&lt;/h2&gt;
&lt;p&gt;/etc/environment 設定:&lt;/p&gt;
&lt;p&gt;HTTPS=on&lt;/p&gt;
&lt;p&gt;/etc/default/stunnel4 檔案設定:&lt;/p&gt;
&lt;p&gt;ENABLED=1&lt;/p&gt;
&lt;h2&gt;Stunnel 設定並執行 fossil http 指令&lt;/h2&gt;
&lt;p&gt;stunnel.conf&lt;/p&gt;
&lt;p&gt;建立 localhost.key 與 localhost.crt:&lt;/p&gt;
&lt;p&gt;sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt&lt;/p&gt;
&lt;p&gt;/etc/stunnel/stunnel.conf 設定檔案, 可同時支援 IPv4 與 IPv6 協定:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
[https]
accept = your_IPv4_ip:443
accept = :::443
cert = /etc/stunnel/localhost.crt
key = /etc/stunnel/localhost.key
exec = /usr/bin/fossil
execargs = /usr/bin/fossil http /home/user/repository/mde2a1.fossil --https --nojail
&lt;/pre&gt;

&lt;p&gt;其中 --nojail 目的在 drop the root privilege but do not enter the chroot jail&lt;/p&gt;
&lt;p&gt;重新啟動 stunnel4 則使用 /etc/init.d/stunnel4 restart&lt;/p&gt;
&lt;p&gt;上述設定完成後, 重新開機即可以 https://yourip 連結至 mde2a1.fossil 網際管理介面.&lt;/p&gt;</content><category term="Ubuntu"></category><category term="stunnel"></category><category term="fossil"></category></entry><entry><title>Windows 環境下啟動 Stunnel 與 Fossil SCM</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017spring-stunnel-fossil.html" rel="alternate"></link><published>2017-03-04T11:00:00+08:00</published><updated>2017-03-04T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-03-04:/2017fall/doc/trunk/blog/kmol-2017spring-stunnel-fossil.html</id><summary type="html">&lt;p&gt;說明如何在 Windows 操作系統中, 利用 batch 檔案取得電腦連外 IP, 並且設定 Stunnel 後與 Fossil SCM server 配合啟動.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;說明如何在 Windows 操作系統中, 利用 batch 檔案取得電腦連外 IP, 並且設定 Stunnel 後與 Fossil SCM server 配合啟動.&lt;/p&gt;


&lt;p&gt;以下使用 &lt;a href="http://service.mde.tw/public/tiny2017_1GB.7z"&gt;Spring 2017 1GB&lt;/a&gt; 版本的隨身程式系統, 修改 start.bat 如下後, 可以自動取得電腦連外 IPv4 IP 位址, 並將設定資料寫入 stunnel.conf 後啟動.&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
REM tiny2017 主要針對初學 Python3 與 C 學員所建立
REM 近端使用 fossil 管理資料版本, 並且定時轉為 git 格式後上傳到 github
@echo off
REM 設定 y 硬碟代號與 data 目錄對應
set Disk=y
subst %Disk%: "data"
REM 設定 leo 相關對應 Home 位置
set HomePath=%Disk%:\home
set HomeDrive=%Disk%:\home
set Home=%Disk%:\home
REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"
REM 將後續的指令執行, 以 %Disk% 為主
%Disk%:
REM 設定 PYTHONPATH
set PYTHONPATH=%Disk%:\python-3.5.3-embed-amd64
REM 設定 Leo 所用的編輯器
set LEO_EDITOR=%Disk%:\wscite\SciTE.exe
REM for fossil https 連線設定
set HTTPS=on
REM 指令搜尋路徑設定
set path1=%PATH%;%Disk%:;%Disk%:\python-3.5.3-embed-amd64;%Disk%:\git\bin;%Disk%:\stunnel\bin;%Disk%:\sqlite-tools;%Disk%:\python-3.5.3-embed-amd64\Scripts;%Disk%:\portablegit\bin;
set path2=c:\Windows\Microsoft.NET\Framework\v3.5;%Disk%:\python-3.5.3-embed-amd64\Lib\site-packages;
set path3="C:\Program Files (x86)\Google\Chrome\Application"
path=%path%;%path1%;%path2%;%path3%
start /MIN %Disk%:\wscite\SciTE.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
REM 啟動 Leo 編輯器
REM %Disk%:\Miniconda3\python.exe %Disk%:\apps\launchLeo.py
REM 啟動 stunnel
start /MIN fossil.exe server -P 127.0.0.1:8080 %Disk%:\tmp\fossil_repo\vcp.fossil
REM 取得電腦 IP, 然後設定 %Disk%:/stunnel/config/stunnel.conf
for /f "delims=[] tokens=2" %%a in ('ping -4 -n 1 %ComputerName% ^| findstr [') do set NetworkIP=%%a
REM echo Network IP: %NetworkIP%
REM Saved in %Disk%:\stunnel\config\stunnel.conf
@echo off
REM 建立 stunnel.conf
@echo [https] &gt; %Disk%:\stunnel\config\stunnel.conf
REM 附加資料
@echo accept = %NetworkIP%:443 &gt;&gt; %Disk%:\stunnel\config\stunnel.conf
@echo connect = 127.0.0.1:8080 &gt;&gt; %Disk%:\stunnel\config\stunnel.conf
@echo TIMEOUTclose = 0 &gt;&gt; %Disk%:\stunnel\config\stunnel.conf
@echo cert = %Disk%:\stunnel\config\localhost.crt &gt;&gt; %Disk%:\stunnel\config\stunnel.conf
@echo key = %Disk%:\stunnel\config\localhost.key &gt;&gt; %Disk%:\stunnel\config\stunnel.conf
REM 啟動 stunnel
start /MIN stunnel.exe
REM 以 chrome 連線到 https://%NetworkIP%:443
chrome https://%NetworkIP%
Exit
&lt;/pre&gt;</content><category term="Windows"></category><category term="stunnel"></category><category term="fossil"></category></entry><entry><title>Ubuntu 16.04 環境下安裝 Ethercalc</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-2017spring-ubuntu-ethercalc.html" rel="alternate"></link><published>2017-03-03T11:00:00+08:00</published><updated>2017-03-03T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-03-03:/2017fall/doc/trunk/blog/kmol-2017spring-ubuntu-ethercalc.html</id><summary type="html">&lt;p&gt;說明如何在 Ubuntu 16.04 操作系統中安裝 Ethercalc, 並令其開機時啟動.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;說明如何在 Ubuntu 16.04 操作系統中安裝 Ethercalc, 並令其開機時啟動.&lt;/p&gt;


&lt;h2&gt;安裝 node.js 6.x 版&lt;/h2&gt;
&lt;p&gt;curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -&lt;/p&gt;
&lt;p&gt;sudo apt-get install -y nodejs&lt;/p&gt;
&lt;h2&gt;安裝 redis server&lt;/h2&gt;
&lt;p&gt;sudo apt install redis-server&lt;/p&gt;
&lt;h2&gt;安裝 ethercalc&lt;/h2&gt;
&lt;p&gt;sudo npm i -g ethercalc&lt;/p&gt;
&lt;h2&gt;編輯 /etc/rc.local&lt;/h2&gt;
&lt;p&gt;加入 ethercalc 啟動指令&lt;/p&gt;
&lt;p&gt;重新開機後, 就可以利用 http://your ip or domain name:8000 連接 Ethercalc 網頁&lt;/p&gt;</content><category term="Ubuntu"></category><category term="Ethercalc"></category><category term="Node.js"></category></entry><entry><title>網際 Python3 程式環境</title><link href="https://mde1a1.kmol.info/2017fall/doc/trunk/blog/kmol-web-based-python3.html" rel="alternate"></link><published>2017-02-19T11:00:00+08:00</published><updated>2017-02-19T11:00:00+08:00</updated><author><name>yen</name></author><id>tag:mde1a1.kmol.info,2017-02-19:/2017fall/doc/trunk/blog/kmol-web-based-python3.html</id><summary type="html">&lt;p&gt;網際內容管理課程利用 &lt;a href="https://brython.info/"&gt;Brython&lt;/a&gt; 建立一個能夠直接在瀏覽器中執行的 Python3 程式環境, 讓使用者進行各種與機械產品開發相關的設計運算與動靜態模擬.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;網際內容管理課程利用 &lt;a href="https://brython.info/"&gt;Brython&lt;/a&gt; 建立一個能夠直接在瀏覽器中執行的 Python3 程式環境, 讓使用者進行各種與機械產品開發相關的設計運算與動靜態模擬.&lt;/p&gt;


&lt;!-- 導入 FileSaver 與 filereader --&gt;

&lt;script type="text/javascript" src="./../ace/FileSaver.min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../ace/filereader.js"&gt;&lt;/script&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;!-- &lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt; --&gt;

&lt;!-- 為了讓 import script1 可以正確運行, 停留在 Brython 3.2.9 版 --&gt;

&lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/3.2.9/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 假如需要用圖型表示數字, 則利用 canvas 繪圖 --&gt;

&lt;!-- &lt;canvas id="plotarea" width="600" height="400"&gt;&lt;/canvas&gt; --&gt;

&lt;div id="container1"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document, html
container1 = document['container1']
&lt;/script&gt;

&lt;h3&gt;利用伺服器執行 Python3 程式&lt;/h3&gt;
&lt;p&gt;Jupyterhub: &lt;a href="https://8888.kmol.info:9443"&gt;https://8888.kmol.info:9443&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;利用以下的編輯器執行 Python3 程式&lt;/h3&gt;
&lt;p&gt;在 Firefox 中, 以 Preferences - General - Downloads 選擇"Always ask me where to save files"&lt;/p&gt;
&lt;p&gt;在 Chrome 中, 以 Settings - Advanced - Downloads 選擇 Ask where to save each file before downloading&lt;/p&gt;
&lt;script src="./../ace/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/ext-language_tools.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/mode-python3.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/snippets/python.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;

&lt;script type="text/javascript"&gt;
function doSave(){
    var blob = new Blob([localStorage["py_src"]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById('filename').value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;

&lt;script type="text/python3" id="script1"&gt;
import sys
import time
import traceback
import javascript

from browser import document as doc, window, alert

has_ace = True
try:
    editor = window.ace.edit("editor")
    session = editor.getSession()
    session.setMode("ace/mode/python")

    editor.setOptions({
     'enableLiveAutocompletion': True,
     'enableSnippets': True,
     'highlightActiveLine': False,
     'highlightSelectedWord': True
    })
except:
    from browser import html
    editor = html.TEXTAREA(rows=20, cols=70)
    doc["editor"] &lt;= editor
    def get_value(): return editor.value
    def set_value(x):editor.value = x
    editor.getValue = get_value
    editor.setValue = set_value
    has_ace = False

if hasattr(window, 'localStorage'):
    from browser.local_storage import storage
else:
    storage = None

def reset_src():
    if storage is not None and "py_src" in storage:
        editor.setValue(storage["py_src"])
    else:
        editor.setValue('for i in range(10):\n\tprint(i)')
    editor.scrollToRow(0)
    editor.gotoLine(0)

def reset_src_area():
    if storage and "py_src" in storage:
        editor.value = storage["py_src"]
    else:
        editor.value = 'for i in range(10):\n\tprint(i)'

class cOutput:

    def __init__(self,target):
        self.target = doc[target]
    def write(self,data):
        self.target.value += str(data)


#if "console" in doc:
sys.stdout = cOutput("console")
sys.stderr = cOutput("console")

def to_str(xx):
    return str(xx)

info = sys.implementation.version
doc['version'].text = 'Brython %s.%s.%s' % (info.major, info.minor, info.micro)

output = ''

def show_console(ev):
    doc["console"].value = output
    doc["console"].cols = 60
    doc["console"].rows = 10

# load a Python script
def load_script(evt):
    _name = evt.target.value + '?foo=%s' % time.time()
    editor.setValue(open(_name).read())

# run a script, in global namespace if in_globals is True
def run(*args):
    global output
    doc["console"].value = ''
    src = editor.getValue()
    if storage is not None:
       storage["py_src"] = src

    t0 = time.perf_counter()
    try:
        #ns = {'__name__':'__main__'}
        ns = {'__name__':'editor'}
        exec(src, ns)
        state = 1
    except Exception as exc:
        traceback.print_exc(file=sys.stderr)
        state = 0
    output = doc["console"].value

    print('&lt;completed in %6.2f ms&gt;' % ((time.perf_counter() - t0) * 1000.0))
    return state

if has_ace:
    reset_src()
else:
    reset_src_area()

def clear_console(ev):
    doc["console"].value = ""

doc['run'].bind('click',run)
doc['show_console'].bind('click',show_console)
doc['clear_console'].bind('click',clear_console)
&lt;/script&gt;

&lt;div id="version"&gt;&lt;/div&gt;

&lt;div id="editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave();"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="run"&gt;Run&lt;/button&gt;
&lt;button id="show_console"&gt;Output&lt;/button&gt;
&lt;button id="clear_console"&gt;清除&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div id="common"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex1(ev):
    script1.editor.setValue('''#ex1 簡單的 for 迴圈範例
    for i in range(10):
        print(i)
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex1'].bind('click',ex1)
&lt;/script&gt;

&lt;p&gt;&lt;a id="ex1"&gt;ex1&lt;/a&gt;-for 迴圈&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex2(ev):
    script1.editor.setValue('''#溫度轉換程式
from browser import document as doc

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp():
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" 
    # 利用 print() 將轉換結果送到 console 區
    print(output_string)

#直接呼叫 convTemp() 執行
convTemp()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex2'].bind('click',ex2)
&lt;/script&gt;

&lt;p&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt;-溫度換算&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_file(e):
    data = open("./../python_ex/for1.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get"].bind("click", get_file)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_temp1(e):
    data = open("./../python_ex/temp1.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get_temp1"].bind("click", get_temp1)
&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import document
import script1

def get_ver_and_kw(e):
    data = open("./../python_ex/ver_and_kw.py").read()
    script1.editor.setValue(data)
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)

document["get_ver_and_kw"].bind("click", get_ver_and_kw)
&lt;/script&gt;

&lt;p&gt;&lt;button id="get"&gt;for1.py&lt;/button&gt;&lt;button id="get_temp1"&gt;temp1.py&lt;/button&gt;&lt;button id="get_ver_and_kw"&gt;ver_and_kw.py&lt;/button&gt;&lt;/p&gt;</content><category term="brython"></category><category term="w1"></category></entry></feed>